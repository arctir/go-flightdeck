// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package v1

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GithubCatalogProviderFiltersVisibility.
const (
	Internal GithubCatalogProviderFiltersVisibility = "internal"
	Private  GithubCatalogProviderFiltersVisibility = "private"
	Public   GithubCatalogProviderFiltersVisibility = "public"
)

// Defines values for LocationCatalogProviderAllow.
const (
	LocationCatalogProviderAllowAPI       LocationCatalogProviderAllow = "API"
	LocationCatalogProviderAllowComponent LocationCatalogProviderAllow = "Component"
	LocationCatalogProviderAllowDomain    LocationCatalogProviderAllow = "Domain"
	LocationCatalogProviderAllowGroup     LocationCatalogProviderAllow = "Group"
	LocationCatalogProviderAllowLocation  LocationCatalogProviderAllow = "Location"
	LocationCatalogProviderAllowResource  LocationCatalogProviderAllow = "Resource"
	LocationCatalogProviderAllowSystem    LocationCatalogProviderAllow = "System"
	LocationCatalogProviderAllowTemplate  LocationCatalogProviderAllow = "Template"
	LocationCatalogProviderAllowUser      LocationCatalogProviderAllow = "User"
)

// Defines values for LocationCatalogProviderInputAllow.
const (
	LocationCatalogProviderInputAllowAPI       LocationCatalogProviderInputAllow = "API"
	LocationCatalogProviderInputAllowComponent LocationCatalogProviderInputAllow = "Component"
	LocationCatalogProviderInputAllowDomain    LocationCatalogProviderInputAllow = "Domain"
	LocationCatalogProviderInputAllowGroup     LocationCatalogProviderInputAllow = "Group"
	LocationCatalogProviderInputAllowLocation  LocationCatalogProviderInputAllow = "Location"
	LocationCatalogProviderInputAllowResource  LocationCatalogProviderInputAllow = "Resource"
	LocationCatalogProviderInputAllowSystem    LocationCatalogProviderInputAllow = "System"
	LocationCatalogProviderInputAllowTemplate  LocationCatalogProviderInputAllow = "Template"
	LocationCatalogProviderInputAllowUser      LocationCatalogProviderInputAllow = "User"
)

// Defines values for PortalProxyCredentials.
const (
	PortalProxyCredentialsDangerouslyAllowUnauthenticated PortalProxyCredentials = "dangerously-allow-unauthenticated"
	PortalProxyCredentialsForward                         PortalProxyCredentials = "forward"
	PortalProxyCredentialsRequire                         PortalProxyCredentials = "require"
)

// Defines values for PortalProxyInputCredentials.
const (
	PortalProxyInputCredentialsDangerouslyAllowUnauthenticated PortalProxyInputCredentials = "dangerously-allow-unauthenticated"
	PortalProxyInputCredentialsForward                         PortalProxyInputCredentials = "forward"
	PortalProxyInputCredentialsRequire                         PortalProxyInputCredentials = "require"
)

// AuthProvider defines model for AuthProvider.
type AuthProvider struct {
	CreatedAt      time.Time                   `json:"createdAt"`
	Id             openapi_types.UUID          `json:"id"`
	Name           string                      `json:"name"`
	OrganizationId openapi_types.UUID          `json:"organizationId"`
	PortalName     string                      `json:"portalName"`
	ProviderConfig AuthProvider_ProviderConfig `json:"providerConfig"`
}

// AuthProvider_ProviderConfig defines model for AuthProvider.ProviderConfig.
type AuthProvider_ProviderConfig struct {
	union json.RawMessage
}

// AuthProviderConfig defines model for AuthProviderConfig.
type AuthProviderConfig struct {
	ConfigType string `json:"configType"`
}

// AuthProviderInput defines model for AuthProviderInput.
type AuthProviderInput struct {
	Name           string                           `json:"name"`
	ProviderConfig AuthProviderInput_ProviderConfig `json:"providerConfig"`
}

// AuthProviderInput_ProviderConfig defines model for AuthProviderInput.ProviderConfig.
type AuthProviderInput_ProviderConfig struct {
	union json.RawMessage
}

// AuthProvidersListResponse defines model for AuthProvidersListResponse.
type AuthProvidersListResponse struct {
	Items    *[]AuthProvider `json:"items,omitempty"`
	PageInfo PageInfo        `json:"pageInfo"`
	Total    int             `json:"total"`
}

// BaseResourceType defines model for BaseResourceType.
type BaseResourceType struct {
	CreatedAt time.Time          `json:"createdAt"`
	Id        openapi_types.UUID `json:"id"`
}

// CatalogProvider defines model for CatalogProvider.
type CatalogProvider struct {
	CreatedAt      time.Time                      `json:"createdAt"`
	Id             openapi_types.UUID             `json:"id"`
	Name           string                         `json:"name"`
	OrganizationId openapi_types.UUID             `json:"organizationId"`
	PortalName     string                         `json:"portalName"`
	ProviderConfig CatalogProvider_ProviderConfig `json:"providerConfig"`
}

// CatalogProvider_ProviderConfig defines model for CatalogProvider.ProviderConfig.
type CatalogProvider_ProviderConfig struct {
	union json.RawMessage
}

// CatalogProviderConfig defines model for CatalogProviderConfig.
type CatalogProviderConfig struct {
	ConfigType string `json:"configType" tfsdk:"-"`
}

// CatalogProviderInput defines model for CatalogProviderInput.
type CatalogProviderInput struct {
	Name           string                              `json:"name"`
	ProviderConfig CatalogProviderInput_ProviderConfig `json:"providerConfig"`
}

// CatalogProviderInput_ProviderConfig defines model for CatalogProviderInput.ProviderConfig.
type CatalogProviderInput_ProviderConfig struct {
	union json.RawMessage
}

// CatalogProvidersListResponse defines model for CatalogProvidersListResponse.
type CatalogProvidersListResponse struct {
	Items    *[]CatalogProvider `json:"items,omitempty"`
	PageInfo PageInfo           `json:"pageInfo"`
	Total    int                `json:"total"`
}

// Cluster defines model for Cluster.
type Cluster struct {
	CreatedAt   time.Time          `json:"createdAt"`
	DisplayName string             `json:"displayName"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
	Region      string             `json:"region"`
}

// ClustersListResponse defines model for ClustersListResponse.
type ClustersListResponse struct {
	Items    *[]Cluster `json:"items,omitempty"`
	PageInfo PageInfo   `json:"pageInfo"`
	Total    int        `json:"total"`
}

// Connection defines model for Connection.
type Connection struct {
	ConnectionConfig Connection_ConnectionConfig `json:"connectionConfig"`
	CreatedAt        time.Time                   `json:"createdAt"`
	Id               openapi_types.UUID          `json:"id"`
	Name             string                      `json:"name"`
	OrganizationId   openapi_types.UUID          `json:"organizationId"`
	PortalName       string                      `json:"portalName"`
}

// Connection_ConnectionConfig defines model for Connection.ConnectionConfig.
type Connection_ConnectionConfig struct {
	union json.RawMessage
}

// ConnectionConfig defines model for ConnectionConfig.
type ConnectionConfig struct {
	ConfigType string `json:"configType" tfsdk:"-"`
}

// ConnectionInput defines model for ConnectionInput.
type ConnectionInput struct {
	ConnectionConfig ConnectionInput_ConnectionConfig `json:"connectionConfig"`
	Name             string                           `json:"name"`
}

// ConnectionInput_ConnectionConfig defines model for ConnectionInput.ConnectionConfig.
type ConnectionInput_ConnectionConfig struct {
	union json.RawMessage
}

// ConnectionsListResponse defines model for ConnectionsListResponse.
type ConnectionsListResponse struct {
	Items    *[]Connection `json:"items,omitempty"`
	PageInfo PageInfo      `json:"pageInfo"`
	Total    int           `json:"total"`
}

// EntityPageCardSpec defines model for EntityPageCardSpec.
type EntityPageCardSpec struct {
	Config  *map[string]interface{} `json:"config" tfsdk:"config"`
	Filters *[]string               `json:"filters" tfsdk:"filters"`
	Path    string                  `json:"path" tfsdk:"path"`
}

// EntityPageContentSpec defines model for EntityPageContentSpec.
type EntityPageContentSpec struct {
	Config  *map[string]interface{} `json:"config" tfsdk:"config"`
	Filters *[]string               `json:"filters" tfsdk:"filters"`
	Path    string                  `json:"path" tfsdk:"path"`
}

// EntityPageLayout defines model for EntityPageLayout.
type EntityPageLayout struct {
	Active         *bool                    `json:"active,omitempty"`
	CardOrder      *[]EntityPageCardSpec    `json:"cardOrder"`
	ContentOrder   *[]EntityPageContentSpec `json:"contentOrder"`
	CreatedAt      time.Time                `json:"createdAt"`
	Id             openapi_types.UUID       `json:"id"`
	Name           string                   `json:"name"`
	OrganizationId openapi_types.UUID       `json:"organizationId"`
	PortalName     string                   `json:"portalName"`
}

// EntityPageLayoutInput defines model for EntityPageLayoutInput.
type EntityPageLayoutInput struct {
	Active       *bool                    `json:"active,omitempty"`
	CardOrder    *[]EntityPageCardSpec    `json:"cardOrder"`
	ContentOrder *[]EntityPageContentSpec `json:"contentOrder"`
	Name         string                   `json:"name"`
}

// EntityPageLayoutsListResponse defines model for EntityPageLayoutsListResponse.
type EntityPageLayoutsListResponse struct {
	Items    *[]EntityPageLayout `json:"items,omitempty"`
	PageInfo PageInfo            `json:"pageInfo"`
	Total    int                 `json:"total"`
}

// GithubAppIntegration defines model for GithubAppIntegration.
type GithubAppIntegration struct {
	// AllowedInstallationOwners List of installation owners allowed to be used by this GitHub app. The GitHub UI does not provide a way to list the installations.
	// However you can list the installations with the GitHub API. You can find the list of installations here:
	// https://api.github.com/app/installations
	// The relevant documentation for this is here.
	// https://docs.github.com/en/rest/reference/apps#list-installations-for-the-authenticated-app--code-samples
	AllowedInstallationOwners *[]string `json:"allowedInstallationOwners,omitempty" tfsdk:"allowed_installation_owners"`

	// AppId The numeric GitHub App ID, string for environment variables
	AppId string `json:"appId" tfsdk:"app_id"`

	// ClientId The client ID to use
	ClientId string `json:"clientId" tfsdk:"client_id"`

	// ClientSecret The client secret to use
	ClientSecret *string `arctirmapstructue:"-" json:"-" tfsdk:"client_secret"`

	// PrivateKey The private key to use for auth against the app
	PrivateKey *string `arctirmapstructue:"-" json:"-" tfsdk:"private_key"`

	// WebhookSecret The secret used for webhooks
	WebhookSecret *string `arctirmapstructue:"-" json:"-" tfsdk:"webhook_secret"`
}

// GithubAuthProvider defines model for GithubAuthProvider.
type GithubAuthProvider struct {
	AdditionalScopes      *[]string `json:"additionalScopes,omitempty" tfsdk:"additional_scopes"`
	CallbackUrl           *string   `json:"callbackUrl,omitempty" tfsdk:"callback_url"`
	ClientId              string    `json:"clientId" tfsdk:"client_id"`
	ClientSecret          *string   `json:"clientSecret,omitempty" tfsdk:"client_secret"`
	ConfigType            string    `json:"configType"`
	EnterpriseInstanceUrl *string   `json:"enterpriseInstanceUrl,omitempty" tfsdk:"enterprise_instance_url"`
}

// GithubAuthProviderInput defines model for GithubAuthProviderInput.
type GithubAuthProviderInput struct {
	AdditionalScopes      *[]string `json:"additionalScopes,omitempty" tfsdk:"additional_scopes"`
	CallbackUrl           *string   `json:"callbackUrl,omitempty" tfsdk:"callback_url"`
	ClientId              string    `json:"clientId" tfsdk:"client_id"`
	ClientSecret          *string   `json:"clientSecret,omitempty" tfsdk:"client_secret"`
	EnterpriseInstanceUrl *string   `json:"enterpriseInstanceUrl,omitempty" tfsdk:"enterprise_instance_url"`
}

// GithubCatalogProvider defines model for GithubCatalogProvider.
type GithubCatalogProvider struct {
	CatalogPath  *string                       `json:"catalogPath,omitempty" tfsdk:"catalog_path"`
	ConfigType   string                        `json:"configType" tfsdk:"-"`
	Filters      *GithubCatalogProviderFilters `json:"filters,omitempty" tfsdk:"filters"`
	Host         *string                       `json:"host,omitempty" tfsdk:"host"`
	Organization string                        `json:"organization" tfsdk:"organization"`
	Schedule     *TaskScheduleDefinitionConfig `json:"schedule,omitempty" tfsdk:"-"`
}

// GithubCatalogProviderFilters defines model for GithubCatalogProviderFilters.
type GithubCatalogProviderFilters struct {
	AllowForks *bool                                     `json:"allowForks,omitempty" tfsdk:"allow_forks"`
	Branch     *string                                   `json:"branch,omitempty" tfsdk:"branch"`
	Repository *string                                   `json:"repository,omitempty" tfsdk:"repository"`
	Topic      *GithubCatalogProviderFiltersTopic        `json:"topic,omitempty" tfsdk:"topic"`
	Visibility *[]GithubCatalogProviderFiltersVisibility `json:"visibility,omitempty" tfsdk:"visibility"`
}

// GithubCatalogProviderFiltersVisibility defines model for GithubCatalogProviderFilters.Visibility.
type GithubCatalogProviderFiltersVisibility string

// GithubCatalogProviderFiltersTopic defines model for GithubCatalogProviderFiltersTopic.
type GithubCatalogProviderFiltersTopic struct {
	Exclude *[]string `json:"exclude,omitempty" tfsdk:"exclude"`
	Include *[]string `json:"include,omitempty" tfsdk:"include"`
}

// GithubCatalogProviderInput defines model for GithubCatalogProviderInput.
type GithubCatalogProviderInput struct {
	CatalogPath  *string                       `json:"catalogPath,omitempty" tfsdk:"catalog_path"`
	Filters      *GithubCatalogProviderFilters `json:"filters,omitempty" tfsdk:"filters"`
	Host         *string                       `json:"host,omitempty" tfsdk:"host"`
	Organization string                        `json:"organization" tfsdk:"organization"`
	Schedule     *TaskScheduleDefinitionConfig `json:"schedule,omitempty" tfsdk:"-"`
}

// GithubIdentityProvider defines model for GithubIdentityProvider.
type GithubIdentityProvider struct {
	ApiUrl       *string `json:"apiUrl,omitempty"`
	BaseUrl      *string `json:"baseUrl,omitempty"`
	ClientId     string  `json:"clientId"`
	ClientSecret *string `json:"clientSecret,omitempty"`
	ConfigType   string  `json:"configType"`
	RedirectUri  string  `json:"redirectUri"`
}

// GithubIdentityProviderInput defines model for GithubIdentityProviderInput.
type GithubIdentityProviderInput struct {
	ApiUrl       *string `json:"apiUrl,omitempty"`
	BaseUrl      *string `json:"baseUrl,omitempty"`
	ClientId     string  `json:"clientId"`
	ClientSecret *string `json:"clientSecret,omitempty"`
	RedirectUri  string  `json:"redirectUri"`
}

// GithubIntegration defines model for GithubIntegration.
type GithubIntegration struct {
	// ApiBaseUrl The base url for the GitHub API, for example https://api.github.com
	ApiBaseUrl *string `json:"apiBaseUrl,omitempty" tfsdk:"api_base_url"`

	// Apps GitHub Apps configuration
	Apps       *[]GithubAppIntegration `json:"apps,omitempty" tfsdk:"apps"`
	ConfigType string                  `json:"configType" tfsdk:"-"`

	// Host The hostname of the given GitHub instance
	Host string `json:"host" tfsdk:"host"`

	// RawBaseUrl The base url for GitHub raw resources, for example https://raw.githubusercontent.com
	RawBaseUrl *string `json:"rawBaseUrl,omitempty" tfsdk:"raw_base_url"`

	// Token Token used to authenticate requests.
	Token *string `arctirmapstructure:"tokenRef" json:"token,omitempty" tfsdk:"token"`
}

// GithubIntegrationInput defines model for GithubIntegrationInput.
type GithubIntegrationInput struct {
	// ApiBaseUrl The base url for the GitHub API, for example https://api.github.com
	ApiBaseUrl *string `json:"apiBaseUrl,omitempty" tfsdk:"api_base_url"`

	// Apps GitHub Apps configuration
	Apps *[]GithubAppIntegration `json:"apps,omitempty" tfsdk:"apps"`

	// Host The hostname of the given GitHub instance
	Host string `json:"host" tfsdk:"host"`

	// RawBaseUrl The base url for GitHub raw resources, for example https://raw.githubusercontent.com
	RawBaseUrl *string `json:"rawBaseUrl,omitempty" tfsdk:"raw_base_url"`

	// Token Token used to authenticate requests.
	Token *string `arctirmapstructure:"tokenRef" json:"token,omitempty" tfsdk:"token"`
}

// GitlabAuthProvider defines model for GitlabAuthProvider.
type GitlabAuthProvider struct {
	AdditionalScopes *[]string `json:"additionalScopes,omitempty" tfsdk:"additional_scopes"`
	Audience         *string   `json:"audience,omitempty"`
	CallbackUrl      *string   `json:"callbackUrl,omitempty"`
	ClientId         string    `json:"clientId"`
	ClientSecret     *string   `json:"clientSecret,omitempty"`
	ConfigType       string    `json:"configType"`
}

// GitlabAuthProviderInput defines model for GitlabAuthProviderInput.
type GitlabAuthProviderInput struct {
	AdditionalScopes *[]string `json:"additionalScopes,omitempty" tfsdk:"additional_scopes"`
	Audience         *string   `json:"audience,omitempty"`
	CallbackUrl      *string   `json:"callbackUrl,omitempty"`
	ClientId         string    `json:"clientId"`
	ClientSecret     *string   `json:"clientSecret,omitempty"`
}

// GitlabCatalogProvider defines model for GitlabCatalogProvider.
type GitlabCatalogProvider struct {
	Branch          *string                       `json:"branch,omitempty" tfsdk:"branch"`
	ConfigType      string                        `json:"configType" tfsdk:"-"`
	EntityFilename  *string                       `json:"entityFilename,omitempty" tfsdk:"entity_filename"`
	Group           *string                       `json:"group,omitempty" tfsdk:"group"`
	GroupPattern    *string                       `json:"groupPattern,omitempty" tfsdk:"group_pattern"`
	Host            string                        `json:"host" tfsdk:"host"`
	ProjectPattern  *string                       `json:"projectPattern,omitempty" tfsdk:"project_pattern"`
	Schedule        *TaskScheduleDefinitionConfig `json:"schedule,omitempty" tfsdk:"-"`
	SkipForkedRepos *bool                         `json:"skipForkedRepos,omitempty" tfsdk:"skip_forked_repos"`
	UserPattern     *string                       `json:"userPattern,omitempty" tfsdk:"user_pattern"`
}

// GitlabCatalogProviderInput defines model for GitlabCatalogProviderInput.
type GitlabCatalogProviderInput struct {
	Branch          *string                       `json:"branch,omitempty" tfsdk:"branch"`
	EntityFilename  *string                       `json:"entityFilename,omitempty" tfsdk:"entity_filename"`
	Group           *string                       `json:"group,omitempty" tfsdk:"group"`
	GroupPattern    *string                       `json:"groupPattern,omitempty" tfsdk:"group_pattern"`
	Host            string                        `json:"host" tfsdk:"host"`
	ProjectPattern  *string                       `json:"projectPattern,omitempty" tfsdk:"project_pattern"`
	Schedule        *TaskScheduleDefinitionConfig `json:"schedule,omitempty" tfsdk:"-"`
	SkipForkedRepos *bool                         `json:"skipForkedRepos,omitempty" tfsdk:"skip_forked_repos"`
	UserPattern     *string                       `json:"userPattern,omitempty" tfsdk:"user_pattern"`
}

// GitlabIdentityProvider defines model for GitlabIdentityProvider.
type GitlabIdentityProvider struct {
	ClientId     string  `json:"clientId"`
	ClientSecret *string `json:"clientSecret,omitempty"`
	ConfigType   string  `json:"configType"`
	RedirectUri  string  `json:"redirectUri"`
}

// GitlabIdentityProviderInput defines model for GitlabIdentityProviderInput.
type GitlabIdentityProviderInput struct {
	ClientId     string  `json:"clientId"`
	ClientSecret *string `json:"clientSecret,omitempty"`
	RedirectUri  string  `json:"redirectUri"`
}

// GitlabIntegration defines model for GitlabIntegration.
type GitlabIntegration struct {
	ApiBaseUrl *string `json:"apiBaseUrl,omitempty" tfsdk:"api_base_url"`
	BaseUrl    *string `json:"baseUrl,omitempty" tfsdk:"base_url"`
	ConfigType string  `json:"configType" tfsdk:"-"`
	Host       string  `json:"host" tfsdk:"host"`
	Token      *string `json:"token,omitempty" tfsdk:"token"`
}

// GitlabIntegrationInput defines model for GitlabIntegrationInput.
type GitlabIntegrationInput struct {
	ApiBaseUrl *string `json:"apiBaseUrl,omitempty" tfsdk:"api_base_url"`
	BaseUrl    *string `json:"baseUrl,omitempty" tfsdk:"base_url"`
	Host       string  `json:"host" tfsdk:"host"`
	Token      *string `json:"token,omitempty" tfsdk:"token"`
}

// GoogleAuthProvider defines model for GoogleAuthProvider.
type GoogleAuthProvider struct {
	AdditionalScopes *[]string `json:"additionalScopes,omitempty" tfsdk:"additional_scopes"`
	CallbackUrl      *string   `json:"callbackUrl,omitempty"`
	ClientId         string    `json:"clientId"`
	ClientSecret     *string   `json:"clientSecret,omitempty"`
	ConfigType       string    `json:"configType"`
}

// GoogleAuthProviderInput defines model for GoogleAuthProviderInput.
type GoogleAuthProviderInput struct {
	AdditionalScopes *[]string `json:"additionalScopes,omitempty" tfsdk:"additional_scopes"`
	CallbackUrl      *string   `json:"callbackUrl,omitempty"`
	ClientId         string    `json:"clientId"`
	ClientSecret     *string   `json:"clientSecret,omitempty"`
}

// GoogleIdentityProvider defines model for GoogleIdentityProvider.
type GoogleIdentityProvider struct {
	ClientId     *string `json:"clientId,omitempty"`
	ClientSecret *string `json:"clientSecret,omitempty"`
	ConfigType   string  `json:"configType"`
	HostedDomain *string `json:"hostedDomain,omitempty"`
	RedirectUri  *string `json:"redirectUri,omitempty"`
	RefreshToken *bool   `json:"refreshToken,omitempty"`
	UserIp       *bool   `json:"userIp,omitempty"`
}

// GoogleIdentityProviderInput defines model for GoogleIdentityProviderInput.
type GoogleIdentityProviderInput struct {
	ClientId     *string `json:"clientId,omitempty"`
	ClientSecret *string `json:"clientSecret,omitempty"`
	HostedDomain *string `json:"hostedDomain,omitempty"`
	RedirectUri  *string `json:"redirectUri,omitempty"`
	RefreshToken *bool   `json:"refreshToken,omitempty"`
	UserIp       *bool   `json:"userIp,omitempty"`
}

// IdentityProvider defines model for IdentityProvider.
type IdentityProvider struct {
	CreatedAt      time.Time                       `json:"createdAt"`
	Id             openapi_types.UUID              `json:"id"`
	Name           string                          `json:"name"`
	OrganizationId openapi_types.UUID              `json:"organizationId"`
	ProviderConfig IdentityProvider_ProviderConfig `json:"providerConfig"`
	TenantName     string                          `json:"tenantName"`
}

// IdentityProvider_ProviderConfig defines model for IdentityProvider.ProviderConfig.
type IdentityProvider_ProviderConfig struct {
	union json.RawMessage
}

// IdentityProviderConfig defines model for IdentityProviderConfig.
type IdentityProviderConfig struct {
	ConfigType string `json:"configType"`
}

// IdentityProviderInput defines model for IdentityProviderInput.
type IdentityProviderInput struct {
	Name           string                               `json:"name"`
	ProviderConfig IdentityProviderInput_ProviderConfig `json:"providerConfig"`
}

// IdentityProviderInput_ProviderConfig defines model for IdentityProviderInput.ProviderConfig.
type IdentityProviderInput_ProviderConfig struct {
	union json.RawMessage
}

// IdentityProvidersListResponse defines model for IdentityProvidersListResponse.
type IdentityProvidersListResponse struct {
	Items    *[]IdentityProvider `json:"items,omitempty"`
	PageInfo PageInfo            `json:"pageInfo"`
	Total    int                 `json:"total"`
}

// Integration defines model for Integration.
type Integration struct {
	CreatedAt         time.Time                     `json:"createdAt"`
	Id                openapi_types.UUID            `json:"id"`
	IntegrationConfig Integration_IntegrationConfig `json:"integrationConfig"`
	Name              string                        `json:"name"`
	OrganizationId    openapi_types.UUID            `json:"organizationId"`
	PortalName        string                        `json:"portalName"`
}

// Integration_IntegrationConfig defines model for Integration.IntegrationConfig.
type Integration_IntegrationConfig struct {
	union json.RawMessage
}

// IntegrationConfig defines model for IntegrationConfig.
type IntegrationConfig struct {
	ConfigType string `json:"configType" tfsdk:"-"`
}

// IntegrationInput defines model for IntegrationInput.
type IntegrationInput struct {
	IntegrationConfig IntegrationInput_IntegrationConfig `json:"integrationConfig"`
	Name              string                             `json:"name"`
}

// IntegrationInput_IntegrationConfig defines model for IntegrationInput.IntegrationConfig.
type IntegrationInput_IntegrationConfig struct {
	union json.RawMessage
}

// IntegrationsListResponse defines model for IntegrationsListResponse.
type IntegrationsListResponse struct {
	Items    *[]Integration `json:"items,omitempty"`
	PageInfo PageInfo       `json:"pageInfo"`
	Total    int            `json:"total"`
}

// LocationCatalogProvider defines model for LocationCatalogProvider.
type LocationCatalogProvider struct {
	Allow      *[]LocationCatalogProviderAllow `json:"allow,omitempty" tfsdk:"allow"`
	ConfigType string                          `json:"configType" tfsdk:"-"`
	Target     string                          `json:"target" tfsdk:"target"`
}

// LocationCatalogProviderAllow defines model for LocationCatalogProvider.Allow.
type LocationCatalogProviderAllow string

// LocationCatalogProviderInput defines model for LocationCatalogProviderInput.
type LocationCatalogProviderInput struct {
	Allow  *[]LocationCatalogProviderInputAllow `json:"allow,omitempty" tfsdk:"allow"`
	Target string                               `json:"target" tfsdk:"target"`
}

// LocationCatalogProviderInputAllow defines model for LocationCatalogProviderInput.Allow.
type LocationCatalogProviderInputAllow string

// Organization defines model for Organization.
type Organization struct {
	ClusterId    openapi_types.UUID `json:"clusterId"`
	CreatedAt    time.Time          `json:"createdAt"`
	Id           openapi_types.UUID `json:"id"`
	Name         string             `json:"name"`
	Owner        openapi_types.UUID `json:"owner"`
	Subdomain    string             `json:"subdomain"`
	Subscription *SubscriptionInfo  `json:"subscription,omitempty"`
}

// OrganizationInput defines model for OrganizationInput.
type OrganizationInput struct {
	ClusterId    openapi_types.UUID `json:"clusterId"`
	Name         string             `json:"name"`
	Subscription *SubscriptionInfo  `json:"subscription,omitempty"`
}

// OrganizationsListResponse defines model for OrganizationsListResponse.
type OrganizationsListResponse struct {
	Items    *[]Organization `json:"items,omitempty"`
	PageInfo PageInfo        `json:"pageInfo"`
	Total    int             `json:"total"`
}

// PageInfo defines model for PageInfo.
type PageInfo struct {
	Next *string `json:"next,omitempty"`
	Prev *string `json:"prev,omitempty"`
}

// PluginConfiguration defines model for PluginConfiguration.
type PluginConfiguration struct {
	BackendConfig  *map[string]interface{}           `json:"backendConfig,omitempty"`
	CreatedAt      time.Time                         `json:"createdAt"`
	Definition     PluginConfigurationDefinitionSpec `json:"definition"`
	Enabled        bool                              `json:"enabled"`
	FrontendConfig *map[string]interface{}           `json:"frontendConfig,omitempty"`
	Id             openapi_types.UUID                `json:"id"`
}

// PluginConfigurationDefinitionSpec defines model for PluginConfigurationDefinitionSpec.
type PluginConfigurationDefinitionSpec struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// PluginConfigurationInput defines model for PluginConfigurationInput.
type PluginConfigurationInput struct {
	BackendConfig  *map[string]interface{}           `json:"backendConfig,omitempty"`
	Definition     PluginConfigurationDefinitionSpec `json:"definition"`
	Enabled        bool                              `json:"enabled"`
	FrontendConfig *map[string]interface{}           `json:"frontendConfig,omitempty"`
}

// PluginConfigurationsListResponse defines model for PluginConfigurationsListResponse.
type PluginConfigurationsListResponse struct {
	Items    *[]PluginConfiguration `json:"items,omitempty"`
	PageInfo PageInfo               `json:"pageInfo"`
	Total    int                    `json:"total"`
}

// Portal defines model for Portal.
type Portal struct {
	AlternateDomains []string           `json:"alternateDomains"`
	CreatedAt        time.Time          `json:"createdAt"`
	Domain           string             `json:"domain"`
	Hostname         string             `json:"hostname"`
	Id               openapi_types.UUID `json:"id"`
	Identifier       string             `json:"identifier"`
	Name             string             `json:"name"`
	OrganizationId   openapi_types.UUID `json:"organizationId"`
	OrganizationName string             `json:"organizationName"`
	Status           *PortalStatus      `json:"status,omitempty"`
	TenantName       string             `json:"tenantName"`
	Title            string             `json:"title"`
	Url              string             `json:"url"`
	Version          string             `json:"version"`
}

// PortalInput defines model for PortalInput.
type PortalInput struct {
	AlternateDomains []string `json:"alternateDomains"`
	Domain           string   `json:"domain"`
	Name             string   `json:"name"`
	OrganizationName string   `json:"organizationName"`
	TenantName       string   `json:"tenantName"`
	Title            string   `json:"title"`
	Version          string   `json:"version"`
}

// PortalProxiesListResponse defines model for PortalProxiesListResponse.
type PortalProxiesListResponse struct {
	Items    *[]PortalProxy `json:"items,omitempty"`
	PageInfo PageInfo       `json:"pageInfo"`
	Total    int            `json:"total"`
}

// PortalProxy defines model for PortalProxy.
type PortalProxy struct {
	AllowedHeaders *[]string                 `json:"allowedHeaders"`
	AllowedMethods *[]string                 `json:"allowedMethods"`
	ChangeOrigin   *bool                     `json:"changeOrigin,omitempty"`
	CreatedAt      time.Time                 `json:"createdAt"`
	Credentials    PortalProxyCredentials    `json:"credentials"`
	Endpoint       string                    `json:"endpoint"`
	HttpHeaders    *[]PortalProxyHeader      `json:"httpHeaders"`
	Id             openapi_types.UUID        `json:"id"`
	Name           string                    `json:"name"`
	OrganizationId openapi_types.UUID        `json:"organizationId"`
	PathRewrite    *[]PortalProxyPathRewrite `json:"pathRewrite"`
	PortalName     string                    `json:"portalName"`
	Target         string                    `json:"target"`
}

// PortalProxyCredentials defines model for PortalProxy.Credentials.
type PortalProxyCredentials string

// PortalProxyHeader defines model for PortalProxyHeader.
type PortalProxyHeader struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// PortalProxyInput defines model for PortalProxyInput.
type PortalProxyInput struct {
	AllowedHeaders *[]string                   `json:"allowedHeaders"`
	AllowedMethods *[]string                   `json:"allowedMethods"`
	ChangeOrigin   *bool                       `json:"changeOrigin,omitempty"`
	Credentials    PortalProxyInputCredentials `json:"credentials"`
	Endpoint       string                      `json:"endpoint"`
	HttpHeaders    *[]PortalProxyHeader        `json:"httpHeaders"`
	Name           string                      `json:"name"`
	PathRewrite    *[]PortalProxyPathRewrite   `json:"pathRewrite"`
	Target         string                      `json:"target"`
}

// PortalProxyInputCredentials defines model for PortalProxyInput.Credentials.
type PortalProxyInputCredentials string

// PortalProxyPathRewrite defines model for PortalProxyPathRewrite.
type PortalProxyPathRewrite struct {
	Dst string `json:"dst"`
	Src string `json:"src"`
}

// PortalStatus defines model for PortalStatus.
type PortalStatus struct {
	Detail string `json:"detail"`
	Status string `json:"status"`
}

// PortalsListResponse defines model for PortalsListResponse.
type PortalsListResponse struct {
	Items    *[]Portal `json:"items,omitempty"`
	PageInfo PageInfo  `json:"pageInfo"`
	Total    int       `json:"total"`
}

// SubscriptionEntitlements defines model for SubscriptionEntitlements.
type SubscriptionEntitlements struct {
	Connections int `json:"connections"`
	Portals     int `json:"portals"`
	TenantUsers int `json:"tenantUsers"`
	Tenants     int `json:"tenants"`
}

// SubscriptionInfo defines model for SubscriptionInfo.
type SubscriptionInfo struct {
	Entitlements SubscriptionEntitlements `json:"entitlements"`
	Status       string                   `json:"status"`
}

// TailscaleConnection defines model for TailscaleConnection.
type TailscaleConnection struct {
	AuthToken  string `json:"authToken" tfsdk:"auth_token"`
	ConfigType string `json:"configType" tfsdk:"-"`
}

// TailscaleConnectionInput defines model for TailscaleConnectionInput.
type TailscaleConnectionInput struct {
	AuthToken string `json:"authToken" tfsdk:"auth_token"`
}

// TaskScheduleDefinitionConfig defines model for TaskScheduleDefinitionConfig.
type TaskScheduleDefinitionConfig struct {
	Frequency *TaskScheduleDefinitionTimeConfigFrequency `json:"frequency,omitempty" tfsdk:"frequency"`
	Timeout   *TaskScheduleDefinitionTimeConfigTimeout   `json:"timeout,omitempty" tfsdk:"timeout"`
}

// TaskScheduleDefinitionTimeConfigFrequency defines model for TaskScheduleDefinitionTimeConfigFrequency.
type TaskScheduleDefinitionTimeConfigFrequency struct {
	Minutes *int `json:"minutes,omitempty" tfsdk:"minutes"`
}

// TaskScheduleDefinitionTimeConfigTimeout defines model for TaskScheduleDefinitionTimeConfigTimeout.
type TaskScheduleDefinitionTimeConfigTimeout struct {
	Minutes *int `json:"minutes,omitempty" tfsdk:"minutes"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	CreatedAt      time.Time          `json:"createdAt"`
	DisplayName    string             `json:"displayName"`
	Id             openapi_types.UUID `json:"id"`
	Identifier     string             `json:"identifier"`
	IssuerUrl      string             `json:"issuerUrl"`
	Name           string             `json:"name"`
	OrganizationId openapi_types.UUID `json:"organizationId"`
}

// TenantInput defines model for TenantInput.
type TenantInput struct {
	DisplayName string `json:"displayName"`
	Name        string `json:"name"`
}

// TenantUser defines model for TenantUser.
type TenantUser struct {
	CreatedAt      time.Time           `json:"createdAt"`
	Email          openapi_types.Email `json:"email"`
	Id             openapi_types.UUID  `json:"id"`
	OrganizationId openapi_types.UUID  `json:"organizationId"`
	TenantName     string              `json:"tenantName"`
	Username       string              `json:"username"`
}

// TenantUserInput defines model for TenantUserInput.
type TenantUserInput struct {
	Email    openapi_types.Email `json:"email"`
	Username string              `json:"username"`
}

// TenantUsersListResponse defines model for TenantUsersListResponse.
type TenantUsersListResponse struct {
	Items    *[]TenantUser `json:"items,omitempty"`
	PageInfo PageInfo      `json:"pageInfo"`
	Total    int           `json:"total"`
}

// TenantsListResponse defines model for TenantsListResponse.
type TenantsListResponse struct {
	Items    *[]Tenant `json:"items,omitempty"`
	PageInfo PageInfo  `json:"pageInfo"`
	Total    int       `json:"total"`
}

// GetClustersParams defines parameters for GetClusters.
type GetClustersParams struct {
	// Limit Limit number of items
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Prev The previous cursor
	Prev *string `form:"prev,omitempty" json:"prev,omitempty"`

	// Next The next cursor
	Next *string `form:"next,omitempty" json:"next,omitempty"`

	// Name Search for a Cluster by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetOrganizationsParams defines parameters for GetOrganizations.
type GetOrganizationsParams struct {
	// Limit Limit number of items
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Prev The previous cursor
	Prev *string `form:"prev,omitempty" json:"prev,omitempty"`

	// Next The next cursor
	Next *string `form:"next,omitempty" json:"next,omitempty"`

	// Name Search for an Organization by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetPortalsParams defines parameters for GetPortals.
type GetPortalsParams struct {
	// Limit Limit number of items
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Prev The previous cursor
	Prev *string `form:"prev,omitempty" json:"prev,omitempty"`

	// Next The next cursor
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// GetAuthProvidersParams defines parameters for GetAuthProviders.
type GetAuthProvidersParams struct {
	// Limit Limit number of items
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Prev The previous cursor
	Prev *string `form:"prev,omitempty" json:"prev,omitempty"`

	// Next The next cursor
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// GetCatalogProvidersParams defines parameters for GetCatalogProviders.
type GetCatalogProvidersParams struct {
	// Limit Limit number of items
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Prev The previous cursor
	Prev *string `form:"prev,omitempty" json:"prev,omitempty"`

	// Next The next cursor
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// GetConnectionsParams defines parameters for GetConnections.
type GetConnectionsParams struct {
	// Limit Limit number of items
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Prev The previous cursor
	Prev *string `form:"prev,omitempty" json:"prev,omitempty"`

	// Next The next cursor
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// GetEntityPageLayoutsParams defines parameters for GetEntityPageLayouts.
type GetEntityPageLayoutsParams struct {
	// Limit Limit number of items
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Prev The previous cursor
	Prev *string `form:"prev,omitempty" json:"prev,omitempty"`

	// Next The next cursor
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// GetIntegrationsParams defines parameters for GetIntegrations.
type GetIntegrationsParams struct {
	// Limit Limit number of items
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Prev The previous cursor
	Prev *string `form:"prev,omitempty" json:"prev,omitempty"`

	// Next The next cursor
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// GetPluginConfigurationsParams defines parameters for GetPluginConfigurations.
type GetPluginConfigurationsParams struct {
	// Limit Limit number of items
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Prev The previous cursor
	Prev *string `form:"prev,omitempty" json:"prev,omitempty"`

	// Next The next cursor
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// GetPortalProxiesParams defines parameters for GetPortalProxies.
type GetPortalProxiesParams struct {
	// Limit Limit number of items
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Prev The previous cursor
	Prev *string `form:"prev,omitempty" json:"prev,omitempty"`

	// Next The next cursor
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// GetTenantsParams defines parameters for GetTenants.
type GetTenantsParams struct {
	// Limit Limit number of items
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Prev The previous cursor
	Prev *string `form:"prev,omitempty" json:"prev,omitempty"`

	// Next The next cursor
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// GetIdentityProvidersParams defines parameters for GetIdentityProviders.
type GetIdentityProvidersParams struct {
	// Limit Limit number of items
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Prev The previous cursor
	Prev *string `form:"prev,omitempty" json:"prev,omitempty"`

	// Next The next cursor
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// GetTenantUsersParams defines parameters for GetTenantUsers.
type GetTenantUsersParams struct {
	// Limit Limit number of items
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Prev The previous cursor
	Prev *string `form:"prev,omitempty" json:"prev,omitempty"`

	// Next The next cursor
	Next *string `form:"next,omitempty" json:"next,omitempty"`
}

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody = OrganizationInput

// UpdateOrganizationByIDJSONRequestBody defines body for UpdateOrganizationByID for application/json ContentType.
type UpdateOrganizationByIDJSONRequestBody = OrganizationInput

// CreatePortalJSONRequestBody defines body for CreatePortal for application/json ContentType.
type CreatePortalJSONRequestBody = PortalInput

// UpdatePortalJSONRequestBody defines body for UpdatePortal for application/json ContentType.
type UpdatePortalJSONRequestBody = PortalInput

// CreateAuthProviderJSONRequestBody defines body for CreateAuthProvider for application/json ContentType.
type CreateAuthProviderJSONRequestBody = AuthProviderInput

// UpdateAuthProviderJSONRequestBody defines body for UpdateAuthProvider for application/json ContentType.
type UpdateAuthProviderJSONRequestBody = AuthProviderInput

// CreateCatalogProviderJSONRequestBody defines body for CreateCatalogProvider for application/json ContentType.
type CreateCatalogProviderJSONRequestBody = CatalogProviderInput

// UpdateCatalogProviderJSONRequestBody defines body for UpdateCatalogProvider for application/json ContentType.
type UpdateCatalogProviderJSONRequestBody = CatalogProviderInput

// CreateConnectionJSONRequestBody defines body for CreateConnection for application/json ContentType.
type CreateConnectionJSONRequestBody = ConnectionInput

// UpdateConnectionJSONRequestBody defines body for UpdateConnection for application/json ContentType.
type UpdateConnectionJSONRequestBody = ConnectionInput

// CreateEntityPageLayoutJSONRequestBody defines body for CreateEntityPageLayout for application/json ContentType.
type CreateEntityPageLayoutJSONRequestBody = EntityPageLayoutInput

// UpdateEntityPageLayoutJSONRequestBody defines body for UpdateEntityPageLayout for application/json ContentType.
type UpdateEntityPageLayoutJSONRequestBody = EntityPageLayoutInput

// CreateIntegrationJSONRequestBody defines body for CreateIntegration for application/json ContentType.
type CreateIntegrationJSONRequestBody = IntegrationInput

// UpdateIntegrationJSONRequestBody defines body for UpdateIntegration for application/json ContentType.
type UpdateIntegrationJSONRequestBody = IntegrationInput

// CreatePluginConfigurationJSONRequestBody defines body for CreatePluginConfiguration for application/json ContentType.
type CreatePluginConfigurationJSONRequestBody = PluginConfigurationInput

// UpdatePluginConfigurationJSONRequestBody defines body for UpdatePluginConfiguration for application/json ContentType.
type UpdatePluginConfigurationJSONRequestBody = PluginConfigurationInput

// CreatePortalProxyJSONRequestBody defines body for CreatePortalProxy for application/json ContentType.
type CreatePortalProxyJSONRequestBody = PortalProxyInput

// UpdatePortalProxyJSONRequestBody defines body for UpdatePortalProxy for application/json ContentType.
type UpdatePortalProxyJSONRequestBody = PortalProxyInput

// CreateTenantJSONRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody = TenantInput

// UpdateTenantJSONRequestBody defines body for UpdateTenant for application/json ContentType.
type UpdateTenantJSONRequestBody = TenantInput

// CreateIdentityProviderJSONRequestBody defines body for CreateIdentityProvider for application/json ContentType.
type CreateIdentityProviderJSONRequestBody = IdentityProviderInput

// UpdateIdentityProviderJSONRequestBody defines body for UpdateIdentityProvider for application/json ContentType.
type UpdateIdentityProviderJSONRequestBody = IdentityProviderInput

// CreateTenantUserJSONRequestBody defines body for CreateTenantUser for application/json ContentType.
type CreateTenantUserJSONRequestBody = TenantUserInput

// AsGithubAuthProvider returns the union data inside the AuthProvider_ProviderConfig as a GithubAuthProvider
func (t AuthProvider_ProviderConfig) AsGithubAuthProvider() (GithubAuthProvider, error) {
	var body GithubAuthProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGithubAuthProvider overwrites any union data inside the AuthProvider_ProviderConfig as the provided GithubAuthProvider
func (t *AuthProvider_ProviderConfig) FromGithubAuthProvider(v GithubAuthProvider) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGithubAuthProvider performs a merge with any union data inside the AuthProvider_ProviderConfig, using the provided GithubAuthProvider
func (t *AuthProvider_ProviderConfig) MergeGithubAuthProvider(v GithubAuthProvider) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGitlabAuthProvider returns the union data inside the AuthProvider_ProviderConfig as a GitlabAuthProvider
func (t AuthProvider_ProviderConfig) AsGitlabAuthProvider() (GitlabAuthProvider, error) {
	var body GitlabAuthProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitlabAuthProvider overwrites any union data inside the AuthProvider_ProviderConfig as the provided GitlabAuthProvider
func (t *AuthProvider_ProviderConfig) FromGitlabAuthProvider(v GitlabAuthProvider) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitlabAuthProvider performs a merge with any union data inside the AuthProvider_ProviderConfig, using the provided GitlabAuthProvider
func (t *AuthProvider_ProviderConfig) MergeGitlabAuthProvider(v GitlabAuthProvider) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGoogleAuthProvider returns the union data inside the AuthProvider_ProviderConfig as a GoogleAuthProvider
func (t AuthProvider_ProviderConfig) AsGoogleAuthProvider() (GoogleAuthProvider, error) {
	var body GoogleAuthProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGoogleAuthProvider overwrites any union data inside the AuthProvider_ProviderConfig as the provided GoogleAuthProvider
func (t *AuthProvider_ProviderConfig) FromGoogleAuthProvider(v GoogleAuthProvider) error {
	v.ConfigType = "google"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGoogleAuthProvider performs a merge with any union data inside the AuthProvider_ProviderConfig, using the provided GoogleAuthProvider
func (t *AuthProvider_ProviderConfig) MergeGoogleAuthProvider(v GoogleAuthProvider) error {
	v.ConfigType = "google"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AuthProvider_ProviderConfig) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t AuthProvider_ProviderConfig) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "github":
		return t.AsGithubAuthProvider()
	case "gitlab":
		return t.AsGitlabAuthProvider()
	case "google":
		return t.AsGoogleAuthProvider()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t AuthProvider_ProviderConfig) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AuthProvider_ProviderConfig) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGithubAuthProvider returns the union data inside the AuthProviderInput_ProviderConfig as a GithubAuthProvider
func (t AuthProviderInput_ProviderConfig) AsGithubAuthProvider() (GithubAuthProvider, error) {
	var body GithubAuthProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGithubAuthProvider overwrites any union data inside the AuthProviderInput_ProviderConfig as the provided GithubAuthProvider
func (t *AuthProviderInput_ProviderConfig) FromGithubAuthProvider(v GithubAuthProvider) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGithubAuthProvider performs a merge with any union data inside the AuthProviderInput_ProviderConfig, using the provided GithubAuthProvider
func (t *AuthProviderInput_ProviderConfig) MergeGithubAuthProvider(v GithubAuthProvider) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGitlabAuthProvider returns the union data inside the AuthProviderInput_ProviderConfig as a GitlabAuthProvider
func (t AuthProviderInput_ProviderConfig) AsGitlabAuthProvider() (GitlabAuthProvider, error) {
	var body GitlabAuthProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitlabAuthProvider overwrites any union data inside the AuthProviderInput_ProviderConfig as the provided GitlabAuthProvider
func (t *AuthProviderInput_ProviderConfig) FromGitlabAuthProvider(v GitlabAuthProvider) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitlabAuthProvider performs a merge with any union data inside the AuthProviderInput_ProviderConfig, using the provided GitlabAuthProvider
func (t *AuthProviderInput_ProviderConfig) MergeGitlabAuthProvider(v GitlabAuthProvider) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGoogleAuthProvider returns the union data inside the AuthProviderInput_ProviderConfig as a GoogleAuthProvider
func (t AuthProviderInput_ProviderConfig) AsGoogleAuthProvider() (GoogleAuthProvider, error) {
	var body GoogleAuthProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGoogleAuthProvider overwrites any union data inside the AuthProviderInput_ProviderConfig as the provided GoogleAuthProvider
func (t *AuthProviderInput_ProviderConfig) FromGoogleAuthProvider(v GoogleAuthProvider) error {
	v.ConfigType = "google"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGoogleAuthProvider performs a merge with any union data inside the AuthProviderInput_ProviderConfig, using the provided GoogleAuthProvider
func (t *AuthProviderInput_ProviderConfig) MergeGoogleAuthProvider(v GoogleAuthProvider) error {
	v.ConfigType = "google"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AuthProviderInput_ProviderConfig) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t AuthProviderInput_ProviderConfig) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "github":
		return t.AsGithubAuthProvider()
	case "gitlab":
		return t.AsGitlabAuthProvider()
	case "google":
		return t.AsGoogleAuthProvider()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t AuthProviderInput_ProviderConfig) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AuthProviderInput_ProviderConfig) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGithubCatalogProvider returns the union data inside the CatalogProvider_ProviderConfig as a GithubCatalogProvider
func (t CatalogProvider_ProviderConfig) AsGithubCatalogProvider() (GithubCatalogProvider, error) {
	var body GithubCatalogProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGithubCatalogProvider overwrites any union data inside the CatalogProvider_ProviderConfig as the provided GithubCatalogProvider
func (t *CatalogProvider_ProviderConfig) FromGithubCatalogProvider(v GithubCatalogProvider) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGithubCatalogProvider performs a merge with any union data inside the CatalogProvider_ProviderConfig, using the provided GithubCatalogProvider
func (t *CatalogProvider_ProviderConfig) MergeGithubCatalogProvider(v GithubCatalogProvider) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGitlabCatalogProvider returns the union data inside the CatalogProvider_ProviderConfig as a GitlabCatalogProvider
func (t CatalogProvider_ProviderConfig) AsGitlabCatalogProvider() (GitlabCatalogProvider, error) {
	var body GitlabCatalogProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitlabCatalogProvider overwrites any union data inside the CatalogProvider_ProviderConfig as the provided GitlabCatalogProvider
func (t *CatalogProvider_ProviderConfig) FromGitlabCatalogProvider(v GitlabCatalogProvider) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitlabCatalogProvider performs a merge with any union data inside the CatalogProvider_ProviderConfig, using the provided GitlabCatalogProvider
func (t *CatalogProvider_ProviderConfig) MergeGitlabCatalogProvider(v GitlabCatalogProvider) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsLocationCatalogProvider returns the union data inside the CatalogProvider_ProviderConfig as a LocationCatalogProvider
func (t CatalogProvider_ProviderConfig) AsLocationCatalogProvider() (LocationCatalogProvider, error) {
	var body LocationCatalogProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLocationCatalogProvider overwrites any union data inside the CatalogProvider_ProviderConfig as the provided LocationCatalogProvider
func (t *CatalogProvider_ProviderConfig) FromLocationCatalogProvider(v LocationCatalogProvider) error {
	v.ConfigType = "location"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLocationCatalogProvider performs a merge with any union data inside the CatalogProvider_ProviderConfig, using the provided LocationCatalogProvider
func (t *CatalogProvider_ProviderConfig) MergeLocationCatalogProvider(v LocationCatalogProvider) error {
	v.ConfigType = "location"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CatalogProvider_ProviderConfig) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CatalogProvider_ProviderConfig) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "github":
		return t.AsGithubCatalogProvider()
	case "gitlab":
		return t.AsGitlabCatalogProvider()
	case "location":
		return t.AsLocationCatalogProvider()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CatalogProvider_ProviderConfig) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CatalogProvider_ProviderConfig) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGithubCatalogProvider returns the union data inside the CatalogProviderInput_ProviderConfig as a GithubCatalogProvider
func (t CatalogProviderInput_ProviderConfig) AsGithubCatalogProvider() (GithubCatalogProvider, error) {
	var body GithubCatalogProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGithubCatalogProvider overwrites any union data inside the CatalogProviderInput_ProviderConfig as the provided GithubCatalogProvider
func (t *CatalogProviderInput_ProviderConfig) FromGithubCatalogProvider(v GithubCatalogProvider) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGithubCatalogProvider performs a merge with any union data inside the CatalogProviderInput_ProviderConfig, using the provided GithubCatalogProvider
func (t *CatalogProviderInput_ProviderConfig) MergeGithubCatalogProvider(v GithubCatalogProvider) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGitlabCatalogProvider returns the union data inside the CatalogProviderInput_ProviderConfig as a GitlabCatalogProvider
func (t CatalogProviderInput_ProviderConfig) AsGitlabCatalogProvider() (GitlabCatalogProvider, error) {
	var body GitlabCatalogProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitlabCatalogProvider overwrites any union data inside the CatalogProviderInput_ProviderConfig as the provided GitlabCatalogProvider
func (t *CatalogProviderInput_ProviderConfig) FromGitlabCatalogProvider(v GitlabCatalogProvider) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitlabCatalogProvider performs a merge with any union data inside the CatalogProviderInput_ProviderConfig, using the provided GitlabCatalogProvider
func (t *CatalogProviderInput_ProviderConfig) MergeGitlabCatalogProvider(v GitlabCatalogProvider) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsLocationCatalogProvider returns the union data inside the CatalogProviderInput_ProviderConfig as a LocationCatalogProvider
func (t CatalogProviderInput_ProviderConfig) AsLocationCatalogProvider() (LocationCatalogProvider, error) {
	var body LocationCatalogProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLocationCatalogProvider overwrites any union data inside the CatalogProviderInput_ProviderConfig as the provided LocationCatalogProvider
func (t *CatalogProviderInput_ProviderConfig) FromLocationCatalogProvider(v LocationCatalogProvider) error {
	v.ConfigType = "location"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLocationCatalogProvider performs a merge with any union data inside the CatalogProviderInput_ProviderConfig, using the provided LocationCatalogProvider
func (t *CatalogProviderInput_ProviderConfig) MergeLocationCatalogProvider(v LocationCatalogProvider) error {
	v.ConfigType = "location"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CatalogProviderInput_ProviderConfig) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CatalogProviderInput_ProviderConfig) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "github":
		return t.AsGithubCatalogProvider()
	case "gitlab":
		return t.AsGitlabCatalogProvider()
	case "location":
		return t.AsLocationCatalogProvider()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CatalogProviderInput_ProviderConfig) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CatalogProviderInput_ProviderConfig) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTailscaleConnection returns the union data inside the Connection_ConnectionConfig as a TailscaleConnection
func (t Connection_ConnectionConfig) AsTailscaleConnection() (TailscaleConnection, error) {
	var body TailscaleConnection
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTailscaleConnection overwrites any union data inside the Connection_ConnectionConfig as the provided TailscaleConnection
func (t *Connection_ConnectionConfig) FromTailscaleConnection(v TailscaleConnection) error {
	v.ConfigType = "tailscale"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTailscaleConnection performs a merge with any union data inside the Connection_ConnectionConfig, using the provided TailscaleConnection
func (t *Connection_ConnectionConfig) MergeTailscaleConnection(v TailscaleConnection) error {
	v.ConfigType = "tailscale"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Connection_ConnectionConfig) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Connection_ConnectionConfig) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "tailscale":
		return t.AsTailscaleConnection()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Connection_ConnectionConfig) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Connection_ConnectionConfig) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTailscaleConnection returns the union data inside the ConnectionInput_ConnectionConfig as a TailscaleConnection
func (t ConnectionInput_ConnectionConfig) AsTailscaleConnection() (TailscaleConnection, error) {
	var body TailscaleConnection
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTailscaleConnection overwrites any union data inside the ConnectionInput_ConnectionConfig as the provided TailscaleConnection
func (t *ConnectionInput_ConnectionConfig) FromTailscaleConnection(v TailscaleConnection) error {
	v.ConfigType = "tailscale"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTailscaleConnection performs a merge with any union data inside the ConnectionInput_ConnectionConfig, using the provided TailscaleConnection
func (t *ConnectionInput_ConnectionConfig) MergeTailscaleConnection(v TailscaleConnection) error {
	v.ConfigType = "tailscale"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ConnectionInput_ConnectionConfig) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ConnectionInput_ConnectionConfig) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "tailscale":
		return t.AsTailscaleConnection()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ConnectionInput_ConnectionConfig) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ConnectionInput_ConnectionConfig) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGithubIdentityProvider returns the union data inside the IdentityProvider_ProviderConfig as a GithubIdentityProvider
func (t IdentityProvider_ProviderConfig) AsGithubIdentityProvider() (GithubIdentityProvider, error) {
	var body GithubIdentityProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGithubIdentityProvider overwrites any union data inside the IdentityProvider_ProviderConfig as the provided GithubIdentityProvider
func (t *IdentityProvider_ProviderConfig) FromGithubIdentityProvider(v GithubIdentityProvider) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGithubIdentityProvider performs a merge with any union data inside the IdentityProvider_ProviderConfig, using the provided GithubIdentityProvider
func (t *IdentityProvider_ProviderConfig) MergeGithubIdentityProvider(v GithubIdentityProvider) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGitlabIdentityProvider returns the union data inside the IdentityProvider_ProviderConfig as a GitlabIdentityProvider
func (t IdentityProvider_ProviderConfig) AsGitlabIdentityProvider() (GitlabIdentityProvider, error) {
	var body GitlabIdentityProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitlabIdentityProvider overwrites any union data inside the IdentityProvider_ProviderConfig as the provided GitlabIdentityProvider
func (t *IdentityProvider_ProviderConfig) FromGitlabIdentityProvider(v GitlabIdentityProvider) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitlabIdentityProvider performs a merge with any union data inside the IdentityProvider_ProviderConfig, using the provided GitlabIdentityProvider
func (t *IdentityProvider_ProviderConfig) MergeGitlabIdentityProvider(v GitlabIdentityProvider) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGoogleIdentityProvider returns the union data inside the IdentityProvider_ProviderConfig as a GoogleIdentityProvider
func (t IdentityProvider_ProviderConfig) AsGoogleIdentityProvider() (GoogleIdentityProvider, error) {
	var body GoogleIdentityProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGoogleIdentityProvider overwrites any union data inside the IdentityProvider_ProviderConfig as the provided GoogleIdentityProvider
func (t *IdentityProvider_ProviderConfig) FromGoogleIdentityProvider(v GoogleIdentityProvider) error {
	v.ConfigType = "google"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGoogleIdentityProvider performs a merge with any union data inside the IdentityProvider_ProviderConfig, using the provided GoogleIdentityProvider
func (t *IdentityProvider_ProviderConfig) MergeGoogleIdentityProvider(v GoogleIdentityProvider) error {
	v.ConfigType = "google"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t IdentityProvider_ProviderConfig) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t IdentityProvider_ProviderConfig) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "github":
		return t.AsGithubIdentityProvider()
	case "gitlab":
		return t.AsGitlabIdentityProvider()
	case "google":
		return t.AsGoogleIdentityProvider()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t IdentityProvider_ProviderConfig) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IdentityProvider_ProviderConfig) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGithubIdentityProvider returns the union data inside the IdentityProviderInput_ProviderConfig as a GithubIdentityProvider
func (t IdentityProviderInput_ProviderConfig) AsGithubIdentityProvider() (GithubIdentityProvider, error) {
	var body GithubIdentityProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGithubIdentityProvider overwrites any union data inside the IdentityProviderInput_ProviderConfig as the provided GithubIdentityProvider
func (t *IdentityProviderInput_ProviderConfig) FromGithubIdentityProvider(v GithubIdentityProvider) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGithubIdentityProvider performs a merge with any union data inside the IdentityProviderInput_ProviderConfig, using the provided GithubIdentityProvider
func (t *IdentityProviderInput_ProviderConfig) MergeGithubIdentityProvider(v GithubIdentityProvider) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGitlabIdentityProvider returns the union data inside the IdentityProviderInput_ProviderConfig as a GitlabIdentityProvider
func (t IdentityProviderInput_ProviderConfig) AsGitlabIdentityProvider() (GitlabIdentityProvider, error) {
	var body GitlabIdentityProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitlabIdentityProvider overwrites any union data inside the IdentityProviderInput_ProviderConfig as the provided GitlabIdentityProvider
func (t *IdentityProviderInput_ProviderConfig) FromGitlabIdentityProvider(v GitlabIdentityProvider) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitlabIdentityProvider performs a merge with any union data inside the IdentityProviderInput_ProviderConfig, using the provided GitlabIdentityProvider
func (t *IdentityProviderInput_ProviderConfig) MergeGitlabIdentityProvider(v GitlabIdentityProvider) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGoogleIdentityProvider returns the union data inside the IdentityProviderInput_ProviderConfig as a GoogleIdentityProvider
func (t IdentityProviderInput_ProviderConfig) AsGoogleIdentityProvider() (GoogleIdentityProvider, error) {
	var body GoogleIdentityProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGoogleIdentityProvider overwrites any union data inside the IdentityProviderInput_ProviderConfig as the provided GoogleIdentityProvider
func (t *IdentityProviderInput_ProviderConfig) FromGoogleIdentityProvider(v GoogleIdentityProvider) error {
	v.ConfigType = "google"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGoogleIdentityProvider performs a merge with any union data inside the IdentityProviderInput_ProviderConfig, using the provided GoogleIdentityProvider
func (t *IdentityProviderInput_ProviderConfig) MergeGoogleIdentityProvider(v GoogleIdentityProvider) error {
	v.ConfigType = "google"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t IdentityProviderInput_ProviderConfig) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t IdentityProviderInput_ProviderConfig) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "github":
		return t.AsGithubIdentityProvider()
	case "gitlab":
		return t.AsGitlabIdentityProvider()
	case "google":
		return t.AsGoogleIdentityProvider()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t IdentityProviderInput_ProviderConfig) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IdentityProviderInput_ProviderConfig) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGithubIntegration returns the union data inside the Integration_IntegrationConfig as a GithubIntegration
func (t Integration_IntegrationConfig) AsGithubIntegration() (GithubIntegration, error) {
	var body GithubIntegration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGithubIntegration overwrites any union data inside the Integration_IntegrationConfig as the provided GithubIntegration
func (t *Integration_IntegrationConfig) FromGithubIntegration(v GithubIntegration) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGithubIntegration performs a merge with any union data inside the Integration_IntegrationConfig, using the provided GithubIntegration
func (t *Integration_IntegrationConfig) MergeGithubIntegration(v GithubIntegration) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGitlabIntegration returns the union data inside the Integration_IntegrationConfig as a GitlabIntegration
func (t Integration_IntegrationConfig) AsGitlabIntegration() (GitlabIntegration, error) {
	var body GitlabIntegration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitlabIntegration overwrites any union data inside the Integration_IntegrationConfig as the provided GitlabIntegration
func (t *Integration_IntegrationConfig) FromGitlabIntegration(v GitlabIntegration) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitlabIntegration performs a merge with any union data inside the Integration_IntegrationConfig, using the provided GitlabIntegration
func (t *Integration_IntegrationConfig) MergeGitlabIntegration(v GitlabIntegration) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Integration_IntegrationConfig) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Integration_IntegrationConfig) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "github":
		return t.AsGithubIntegration()
	case "gitlab":
		return t.AsGitlabIntegration()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Integration_IntegrationConfig) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Integration_IntegrationConfig) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGithubIntegration returns the union data inside the IntegrationInput_IntegrationConfig as a GithubIntegration
func (t IntegrationInput_IntegrationConfig) AsGithubIntegration() (GithubIntegration, error) {
	var body GithubIntegration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGithubIntegration overwrites any union data inside the IntegrationInput_IntegrationConfig as the provided GithubIntegration
func (t *IntegrationInput_IntegrationConfig) FromGithubIntegration(v GithubIntegration) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGithubIntegration performs a merge with any union data inside the IntegrationInput_IntegrationConfig, using the provided GithubIntegration
func (t *IntegrationInput_IntegrationConfig) MergeGithubIntegration(v GithubIntegration) error {
	v.ConfigType = "github"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGitlabIntegration returns the union data inside the IntegrationInput_IntegrationConfig as a GitlabIntegration
func (t IntegrationInput_IntegrationConfig) AsGitlabIntegration() (GitlabIntegration, error) {
	var body GitlabIntegration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitlabIntegration overwrites any union data inside the IntegrationInput_IntegrationConfig as the provided GitlabIntegration
func (t *IntegrationInput_IntegrationConfig) FromGitlabIntegration(v GitlabIntegration) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitlabIntegration performs a merge with any union data inside the IntegrationInput_IntegrationConfig, using the provided GitlabIntegration
func (t *IntegrationInput_IntegrationConfig) MergeGitlabIntegration(v GitlabIntegration) error {
	v.ConfigType = "gitlab"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationInput_IntegrationConfig) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t IntegrationInput_IntegrationConfig) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "github":
		return t.AsGithubIntegration()
	case "gitlab":
		return t.AsGitlabIntegration()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t IntegrationInput_IntegrationConfig) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationInput_IntegrationConfig) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetClusters request
	GetClusters(ctx context.Context, params *GetClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterById request
	GetClusterById(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizations request
	GetOrganizations(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationWithBody request with any body
	CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationByID request
	DeleteOrganizationByID(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationByID request
	GetOrganizationByID(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationByIDWithBody request with any body
	UpdateOrganizationByIDWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganizationByID(ctx context.Context, orgId string, body UpdateOrganizationByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPortals request
	GetPortals(ctx context.Context, orgId string, params *GetPortalsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePortalWithBody request with any body
	CreatePortalWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePortal(ctx context.Context, orgId string, body CreatePortalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePortal request
	DeletePortal(ctx context.Context, orgId string, portalName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPortal request
	GetPortal(ctx context.Context, orgId string, portalName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePortalWithBody request with any body
	UpdatePortalWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePortal(ctx context.Context, orgId string, portalName string, body UpdatePortalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthProviders request
	GetAuthProviders(ctx context.Context, orgId string, portalName string, params *GetAuthProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthProviderWithBody request with any body
	CreateAuthProviderWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthProvider(ctx context.Context, orgId string, portalName string, body CreateAuthProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthProvider request
	DeleteAuthProvider(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthProvider request
	GetAuthProvider(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAuthProviderWithBody request with any body
	UpdateAuthProviderWithBody(ctx context.Context, orgId string, portalName string, providerName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAuthProvider(ctx context.Context, orgId string, portalName string, providerName string, body UpdateAuthProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogProviders request
	GetCatalogProviders(ctx context.Context, orgId string, portalName string, params *GetCatalogProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogProviderWithBody request with any body
	CreateCatalogProviderWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCatalogProvider(ctx context.Context, orgId string, portalName string, body CreateCatalogProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCatalogProvider request
	DeleteCatalogProvider(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogProvider request
	GetCatalogProvider(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCatalogProviderWithBody request with any body
	UpdateCatalogProviderWithBody(ctx context.Context, orgId string, portalName string, providerName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCatalogProvider(ctx context.Context, orgId string, portalName string, providerName string, body UpdateCatalogProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnections request
	GetConnections(ctx context.Context, orgId string, portalName string, params *GetConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateConnectionWithBody request with any body
	CreateConnectionWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateConnection(ctx context.Context, orgId string, portalName string, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConnection request
	DeleteConnection(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnection request
	GetConnection(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConnectionWithBody request with any body
	UpdateConnectionWithBody(ctx context.Context, orgId string, portalName string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConnection(ctx context.Context, orgId string, portalName string, name string, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEntityPageLayouts request
	GetEntityPageLayouts(ctx context.Context, orgId string, portalName string, params *GetEntityPageLayoutsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEntityPageLayoutWithBody request with any body
	CreateEntityPageLayoutWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEntityPageLayout(ctx context.Context, orgId string, portalName string, body CreateEntityPageLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEntityPageLayout request
	DeleteEntityPageLayout(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEntityPageLayout request
	GetEntityPageLayout(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEntityPageLayoutWithBody request with any body
	UpdateEntityPageLayoutWithBody(ctx context.Context, orgId string, portalName string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEntityPageLayout(ctx context.Context, orgId string, portalName string, name string, body UpdateEntityPageLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIntegrations request
	GetIntegrations(ctx context.Context, orgId string, portalName string, params *GetIntegrationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIntegrationWithBody request with any body
	CreateIntegrationWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIntegration(ctx context.Context, orgId string, portalName string, body CreateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIntegration request
	DeleteIntegration(ctx context.Context, orgId string, portalName string, integrationName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIntegration request
	GetIntegration(ctx context.Context, orgId string, portalName string, integrationName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIntegrationWithBody request with any body
	UpdateIntegrationWithBody(ctx context.Context, orgId string, portalName string, integrationName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIntegration(ctx context.Context, orgId string, portalName string, integrationName string, body UpdateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPluginConfigurations request
	GetPluginConfigurations(ctx context.Context, orgId string, portalName string, params *GetPluginConfigurationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePluginConfigurationWithBody request with any body
	CreatePluginConfigurationWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePluginConfiguration(ctx context.Context, orgId string, portalName string, body CreatePluginConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePluginConfiguration request
	DeletePluginConfiguration(ctx context.Context, orgId string, portalName string, pluginName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPluginConfiguration request
	GetPluginConfiguration(ctx context.Context, orgId string, portalName string, pluginName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePluginConfigurationWithBody request with any body
	UpdatePluginConfigurationWithBody(ctx context.Context, orgId string, portalName string, pluginName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePluginConfiguration(ctx context.Context, orgId string, portalName string, pluginName string, body UpdatePluginConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPortalProxies request
	GetPortalProxies(ctx context.Context, orgId string, portalName string, params *GetPortalProxiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePortalProxyWithBody request with any body
	CreatePortalProxyWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePortalProxy(ctx context.Context, orgId string, portalName string, body CreatePortalProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePortalProxy request
	DeletePortalProxy(ctx context.Context, orgId string, portalName string, proxyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPortalProxy request
	GetPortalProxy(ctx context.Context, orgId string, portalName string, proxyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePortalProxyWithBody request with any body
	UpdatePortalProxyWithBody(ctx context.Context, orgId string, portalName string, proxyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePortalProxy(ctx context.Context, orgId string, portalName string, proxyName string, body UpdatePortalProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPortalStatus request
	GetPortalStatus(ctx context.Context, orgId string, portalName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenants request
	GetTenants(ctx context.Context, orgId string, params *GetTenantsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTenantWithBody request with any body
	CreateTenantWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTenant(ctx context.Context, orgId string, body CreateTenantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTenant request
	DeleteTenant(ctx context.Context, orgId string, tenantName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenant request
	GetTenant(ctx context.Context, orgId string, tenantName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTenantWithBody request with any body
	UpdateTenantWithBody(ctx context.Context, orgId string, tenantName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTenant(ctx context.Context, orgId string, tenantName string, body UpdateTenantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentityProviders request
	GetIdentityProviders(ctx context.Context, orgId string, tenantName string, params *GetIdentityProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIdentityProviderWithBody request with any body
	CreateIdentityProviderWithBody(ctx context.Context, orgId string, tenantName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIdentityProvider(ctx context.Context, orgId string, tenantName string, body CreateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdentityProvider request
	DeleteIdentityProvider(ctx context.Context, orgId string, tenantName string, providerName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentityProvider request
	GetIdentityProvider(ctx context.Context, orgId string, tenantName string, providerName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIdentityProviderWithBody request with any body
	UpdateIdentityProviderWithBody(ctx context.Context, orgId string, tenantName string, providerName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIdentityProvider(ctx context.Context, orgId string, tenantName string, providerName string, body UpdateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenantUsers request
	GetTenantUsers(ctx context.Context, orgId string, tenantName string, params *GetTenantUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTenantUserWithBody request with any body
	CreateTenantUserWithBody(ctx context.Context, orgId string, tenantName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTenantUser(ctx context.Context, orgId string, tenantName string, body CreateTenantUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTenantUser request
	DeleteTenantUser(ctx context.Context, orgId string, tenantName string, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenantUser request
	GetTenantUser(ctx context.Context, orgId string, tenantName string, username string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetClusters(ctx context.Context, params *GetClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClustersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterById(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterByIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizations(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationByID(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationByIDRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationByID(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationByIDRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationByIDWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationByIDRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationByID(ctx context.Context, orgId string, body UpdateOrganizationByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationByIDRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPortals(ctx context.Context, orgId string, params *GetPortalsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPortalsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePortalWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePortalRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePortal(ctx context.Context, orgId string, body CreatePortalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePortalRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePortal(ctx context.Context, orgId string, portalName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePortalRequest(c.Server, orgId, portalName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPortal(ctx context.Context, orgId string, portalName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPortalRequest(c.Server, orgId, portalName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePortalWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePortalRequestWithBody(c.Server, orgId, portalName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePortal(ctx context.Context, orgId string, portalName string, body UpdatePortalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePortalRequest(c.Server, orgId, portalName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthProviders(ctx context.Context, orgId string, portalName string, params *GetAuthProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthProvidersRequest(c.Server, orgId, portalName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthProviderWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthProviderRequestWithBody(c.Server, orgId, portalName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthProvider(ctx context.Context, orgId string, portalName string, body CreateAuthProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthProviderRequest(c.Server, orgId, portalName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthProvider(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthProviderRequest(c.Server, orgId, portalName, providerName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthProvider(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthProviderRequest(c.Server, orgId, portalName, providerName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthProviderWithBody(ctx context.Context, orgId string, portalName string, providerName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthProviderRequestWithBody(c.Server, orgId, portalName, providerName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthProvider(ctx context.Context, orgId string, portalName string, providerName string, body UpdateAuthProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthProviderRequest(c.Server, orgId, portalName, providerName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogProviders(ctx context.Context, orgId string, portalName string, params *GetCatalogProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogProvidersRequest(c.Server, orgId, portalName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogProviderWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogProviderRequestWithBody(c.Server, orgId, portalName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogProvider(ctx context.Context, orgId string, portalName string, body CreateCatalogProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogProviderRequest(c.Server, orgId, portalName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCatalogProvider(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCatalogProviderRequest(c.Server, orgId, portalName, providerName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogProvider(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogProviderRequest(c.Server, orgId, portalName, providerName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogProviderWithBody(ctx context.Context, orgId string, portalName string, providerName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogProviderRequestWithBody(c.Server, orgId, portalName, providerName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogProvider(ctx context.Context, orgId string, portalName string, providerName string, body UpdateCatalogProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogProviderRequest(c.Server, orgId, portalName, providerName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnections(ctx context.Context, orgId string, portalName string, params *GetConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionsRequest(c.Server, orgId, portalName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnectionWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectionRequestWithBody(c.Server, orgId, portalName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnection(ctx context.Context, orgId string, portalName string, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectionRequest(c.Server, orgId, portalName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConnection(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConnectionRequest(c.Server, orgId, portalName, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnection(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionRequest(c.Server, orgId, portalName, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnectionWithBody(ctx context.Context, orgId string, portalName string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectionRequestWithBody(c.Server, orgId, portalName, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnection(ctx context.Context, orgId string, portalName string, name string, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectionRequest(c.Server, orgId, portalName, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntityPageLayouts(ctx context.Context, orgId string, portalName string, params *GetEntityPageLayoutsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntityPageLayoutsRequest(c.Server, orgId, portalName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEntityPageLayoutWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEntityPageLayoutRequestWithBody(c.Server, orgId, portalName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEntityPageLayout(ctx context.Context, orgId string, portalName string, body CreateEntityPageLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEntityPageLayoutRequest(c.Server, orgId, portalName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEntityPageLayout(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEntityPageLayoutRequest(c.Server, orgId, portalName, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntityPageLayout(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntityPageLayoutRequest(c.Server, orgId, portalName, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEntityPageLayoutWithBody(ctx context.Context, orgId string, portalName string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEntityPageLayoutRequestWithBody(c.Server, orgId, portalName, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEntityPageLayout(ctx context.Context, orgId string, portalName string, name string, body UpdateEntityPageLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEntityPageLayoutRequest(c.Server, orgId, portalName, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIntegrations(ctx context.Context, orgId string, portalName string, params *GetIntegrationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIntegrationsRequest(c.Server, orgId, portalName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIntegrationWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIntegrationRequestWithBody(c.Server, orgId, portalName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIntegration(ctx context.Context, orgId string, portalName string, body CreateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIntegrationRequest(c.Server, orgId, portalName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIntegration(ctx context.Context, orgId string, portalName string, integrationName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIntegrationRequest(c.Server, orgId, portalName, integrationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIntegration(ctx context.Context, orgId string, portalName string, integrationName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIntegrationRequest(c.Server, orgId, portalName, integrationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIntegrationWithBody(ctx context.Context, orgId string, portalName string, integrationName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIntegrationRequestWithBody(c.Server, orgId, portalName, integrationName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIntegration(ctx context.Context, orgId string, portalName string, integrationName string, body UpdateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIntegrationRequest(c.Server, orgId, portalName, integrationName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPluginConfigurations(ctx context.Context, orgId string, portalName string, params *GetPluginConfigurationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPluginConfigurationsRequest(c.Server, orgId, portalName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePluginConfigurationWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePluginConfigurationRequestWithBody(c.Server, orgId, portalName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePluginConfiguration(ctx context.Context, orgId string, portalName string, body CreatePluginConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePluginConfigurationRequest(c.Server, orgId, portalName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePluginConfiguration(ctx context.Context, orgId string, portalName string, pluginName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePluginConfigurationRequest(c.Server, orgId, portalName, pluginName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPluginConfiguration(ctx context.Context, orgId string, portalName string, pluginName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPluginConfigurationRequest(c.Server, orgId, portalName, pluginName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePluginConfigurationWithBody(ctx context.Context, orgId string, portalName string, pluginName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePluginConfigurationRequestWithBody(c.Server, orgId, portalName, pluginName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePluginConfiguration(ctx context.Context, orgId string, portalName string, pluginName string, body UpdatePluginConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePluginConfigurationRequest(c.Server, orgId, portalName, pluginName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPortalProxies(ctx context.Context, orgId string, portalName string, params *GetPortalProxiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPortalProxiesRequest(c.Server, orgId, portalName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePortalProxyWithBody(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePortalProxyRequestWithBody(c.Server, orgId, portalName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePortalProxy(ctx context.Context, orgId string, portalName string, body CreatePortalProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePortalProxyRequest(c.Server, orgId, portalName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePortalProxy(ctx context.Context, orgId string, portalName string, proxyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePortalProxyRequest(c.Server, orgId, portalName, proxyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPortalProxy(ctx context.Context, orgId string, portalName string, proxyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPortalProxyRequest(c.Server, orgId, portalName, proxyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePortalProxyWithBody(ctx context.Context, orgId string, portalName string, proxyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePortalProxyRequestWithBody(c.Server, orgId, portalName, proxyName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePortalProxy(ctx context.Context, orgId string, portalName string, proxyName string, body UpdatePortalProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePortalProxyRequest(c.Server, orgId, portalName, proxyName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPortalStatus(ctx context.Context, orgId string, portalName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPortalStatusRequest(c.Server, orgId, portalName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenants(ctx context.Context, orgId string, params *GetTenantsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTenantWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTenantRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTenant(ctx context.Context, orgId string, body CreateTenantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTenantRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTenant(ctx context.Context, orgId string, tenantName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTenantRequest(c.Server, orgId, tenantName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenant(ctx context.Context, orgId string, tenantName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantRequest(c.Server, orgId, tenantName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTenantWithBody(ctx context.Context, orgId string, tenantName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTenantRequestWithBody(c.Server, orgId, tenantName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTenant(ctx context.Context, orgId string, tenantName string, body UpdateTenantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTenantRequest(c.Server, orgId, tenantName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentityProviders(ctx context.Context, orgId string, tenantName string, params *GetIdentityProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentityProvidersRequest(c.Server, orgId, tenantName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIdentityProviderWithBody(ctx context.Context, orgId string, tenantName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIdentityProviderRequestWithBody(c.Server, orgId, tenantName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIdentityProvider(ctx context.Context, orgId string, tenantName string, body CreateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIdentityProviderRequest(c.Server, orgId, tenantName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdentityProvider(ctx context.Context, orgId string, tenantName string, providerName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdentityProviderRequest(c.Server, orgId, tenantName, providerName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentityProvider(ctx context.Context, orgId string, tenantName string, providerName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentityProviderRequest(c.Server, orgId, tenantName, providerName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIdentityProviderWithBody(ctx context.Context, orgId string, tenantName string, providerName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIdentityProviderRequestWithBody(c.Server, orgId, tenantName, providerName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIdentityProvider(ctx context.Context, orgId string, tenantName string, providerName string, body UpdateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIdentityProviderRequest(c.Server, orgId, tenantName, providerName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenantUsers(ctx context.Context, orgId string, tenantName string, params *GetTenantUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantUsersRequest(c.Server, orgId, tenantName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTenantUserWithBody(ctx context.Context, orgId string, tenantName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTenantUserRequestWithBody(c.Server, orgId, tenantName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTenantUser(ctx context.Context, orgId string, tenantName string, body CreateTenantUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTenantUserRequest(c.Server, orgId, tenantName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTenantUser(ctx context.Context, orgId string, tenantName string, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTenantUserRequest(c.Server, orgId, tenantName, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenantUser(ctx context.Context, orgId string, tenantName string, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantUserRequest(c.Server, orgId, tenantName, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetClustersRequest generates requests for GetClusters
func NewGetClustersRequest(server string, params *GetClustersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prev != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prev", runtime.ParamLocationQuery, *params.Prev); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Next != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next", runtime.ParamLocationQuery, *params.Next); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterByIdRequest generates requests for GetClusterById
func NewGetClusterByIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsRequest generates requests for GetOrganizations
func NewGetOrganizationsRequest(server string, params *GetOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prev != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prev", runtime.ParamLocationQuery, *params.Prev); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Next != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next", runtime.ParamLocationQuery, *params.Next); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRequest calls the generic CreateOrganization builder with application/json body
func NewCreateOrganizationRequest(server string, body CreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationRequestWithBody generates requests for CreateOrganization with any type of body
func NewCreateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationByIDRequest generates requests for DeleteOrganizationByID
func NewDeleteOrganizationByIDRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationByIDRequest generates requests for GetOrganizationByID
func NewGetOrganizationByIDRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationByIDRequest calls the generic UpdateOrganizationByID builder with application/json body
func NewUpdateOrganizationByIDRequest(server string, orgId string, body UpdateOrganizationByIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationByIDRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewUpdateOrganizationByIDRequestWithBody generates requests for UpdateOrganizationByID with any type of body
func NewUpdateOrganizationByIDRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPortalsRequest generates requests for GetPortals
func NewGetPortalsRequest(server string, orgId string, params *GetPortalsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prev != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prev", runtime.ParamLocationQuery, *params.Prev); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Next != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next", runtime.ParamLocationQuery, *params.Next); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePortalRequest calls the generic CreatePortal builder with application/json body
func NewCreatePortalRequest(server string, orgId string, body CreatePortalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePortalRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreatePortalRequestWithBody generates requests for CreatePortal with any type of body
func NewCreatePortalRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePortalRequest generates requests for DeletePortal
func NewDeletePortalRequest(server string, orgId string, portalName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPortalRequest generates requests for GetPortal
func NewGetPortalRequest(server string, orgId string, portalName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePortalRequest calls the generic UpdatePortal builder with application/json body
func NewUpdatePortalRequest(server string, orgId string, portalName string, body UpdatePortalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePortalRequestWithBody(server, orgId, portalName, "application/json", bodyReader)
}

// NewUpdatePortalRequestWithBody generates requests for UpdatePortal with any type of body
func NewUpdatePortalRequestWithBody(server string, orgId string, portalName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthProvidersRequest generates requests for GetAuthProviders
func NewGetAuthProvidersRequest(server string, orgId string, portalName string, params *GetAuthProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/authproviders", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prev != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prev", runtime.ParamLocationQuery, *params.Prev); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Next != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next", runtime.ParamLocationQuery, *params.Next); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthProviderRequest calls the generic CreateAuthProvider builder with application/json body
func NewCreateAuthProviderRequest(server string, orgId string, portalName string, body CreateAuthProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthProviderRequestWithBody(server, orgId, portalName, "application/json", bodyReader)
}

// NewCreateAuthProviderRequestWithBody generates requests for CreateAuthProvider with any type of body
func NewCreateAuthProviderRequestWithBody(server string, orgId string, portalName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/authproviders", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAuthProviderRequest generates requests for DeleteAuthProvider
func NewDeleteAuthProviderRequest(server string, orgId string, portalName string, providerName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerName", runtime.ParamLocationPath, providerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/authproviders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthProviderRequest generates requests for GetAuthProvider
func NewGetAuthProviderRequest(server string, orgId string, portalName string, providerName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerName", runtime.ParamLocationPath, providerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/authproviders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAuthProviderRequest calls the generic UpdateAuthProvider builder with application/json body
func NewUpdateAuthProviderRequest(server string, orgId string, portalName string, providerName string, body UpdateAuthProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAuthProviderRequestWithBody(server, orgId, portalName, providerName, "application/json", bodyReader)
}

// NewUpdateAuthProviderRequestWithBody generates requests for UpdateAuthProvider with any type of body
func NewUpdateAuthProviderRequestWithBody(server string, orgId string, portalName string, providerName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerName", runtime.ParamLocationPath, providerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/authproviders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCatalogProvidersRequest generates requests for GetCatalogProviders
func NewGetCatalogProvidersRequest(server string, orgId string, portalName string, params *GetCatalogProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/catalogproviders", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prev != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prev", runtime.ParamLocationQuery, *params.Prev); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Next != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next", runtime.ParamLocationQuery, *params.Next); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCatalogProviderRequest calls the generic CreateCatalogProvider builder with application/json body
func NewCreateCatalogProviderRequest(server string, orgId string, portalName string, body CreateCatalogProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCatalogProviderRequestWithBody(server, orgId, portalName, "application/json", bodyReader)
}

// NewCreateCatalogProviderRequestWithBody generates requests for CreateCatalogProvider with any type of body
func NewCreateCatalogProviderRequestWithBody(server string, orgId string, portalName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/catalogproviders", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCatalogProviderRequest generates requests for DeleteCatalogProvider
func NewDeleteCatalogProviderRequest(server string, orgId string, portalName string, providerName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerName", runtime.ParamLocationPath, providerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/catalogproviders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCatalogProviderRequest generates requests for GetCatalogProvider
func NewGetCatalogProviderRequest(server string, orgId string, portalName string, providerName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerName", runtime.ParamLocationPath, providerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/catalogproviders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCatalogProviderRequest calls the generic UpdateCatalogProvider builder with application/json body
func NewUpdateCatalogProviderRequest(server string, orgId string, portalName string, providerName string, body UpdateCatalogProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCatalogProviderRequestWithBody(server, orgId, portalName, providerName, "application/json", bodyReader)
}

// NewUpdateCatalogProviderRequestWithBody generates requests for UpdateCatalogProvider with any type of body
func NewUpdateCatalogProviderRequestWithBody(server string, orgId string, portalName string, providerName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerName", runtime.ParamLocationPath, providerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/catalogproviders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConnectionsRequest generates requests for GetConnections
func NewGetConnectionsRequest(server string, orgId string, portalName string, params *GetConnectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/connections", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prev != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prev", runtime.ParamLocationQuery, *params.Prev); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Next != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next", runtime.ParamLocationQuery, *params.Next); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateConnectionRequest calls the generic CreateConnection builder with application/json body
func NewCreateConnectionRequest(server string, orgId string, portalName string, body CreateConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConnectionRequestWithBody(server, orgId, portalName, "application/json", bodyReader)
}

// NewCreateConnectionRequestWithBody generates requests for CreateConnection with any type of body
func NewCreateConnectionRequestWithBody(server string, orgId string, portalName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/connections", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConnectionRequest generates requests for DeleteConnection
func NewDeleteConnectionRequest(server string, orgId string, portalName string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/connections/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectionRequest generates requests for GetConnection
func NewGetConnectionRequest(server string, orgId string, portalName string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/connections/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConnectionRequest calls the generic UpdateConnection builder with application/json body
func NewUpdateConnectionRequest(server string, orgId string, portalName string, name string, body UpdateConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConnectionRequestWithBody(server, orgId, portalName, name, "application/json", bodyReader)
}

// NewUpdateConnectionRequestWithBody generates requests for UpdateConnection with any type of body
func NewUpdateConnectionRequestWithBody(server string, orgId string, portalName string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/connections/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEntityPageLayoutsRequest generates requests for GetEntityPageLayouts
func NewGetEntityPageLayoutsRequest(server string, orgId string, portalName string, params *GetEntityPageLayoutsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/entitypagelayouts", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prev != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prev", runtime.ParamLocationQuery, *params.Prev); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Next != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next", runtime.ParamLocationQuery, *params.Next); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEntityPageLayoutRequest calls the generic CreateEntityPageLayout builder with application/json body
func NewCreateEntityPageLayoutRequest(server string, orgId string, portalName string, body CreateEntityPageLayoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEntityPageLayoutRequestWithBody(server, orgId, portalName, "application/json", bodyReader)
}

// NewCreateEntityPageLayoutRequestWithBody generates requests for CreateEntityPageLayout with any type of body
func NewCreateEntityPageLayoutRequestWithBody(server string, orgId string, portalName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/entitypagelayouts", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEntityPageLayoutRequest generates requests for DeleteEntityPageLayout
func NewDeleteEntityPageLayoutRequest(server string, orgId string, portalName string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/entitypagelayouts/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEntityPageLayoutRequest generates requests for GetEntityPageLayout
func NewGetEntityPageLayoutRequest(server string, orgId string, portalName string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/entitypagelayouts/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEntityPageLayoutRequest calls the generic UpdateEntityPageLayout builder with application/json body
func NewUpdateEntityPageLayoutRequest(server string, orgId string, portalName string, name string, body UpdateEntityPageLayoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEntityPageLayoutRequestWithBody(server, orgId, portalName, name, "application/json", bodyReader)
}

// NewUpdateEntityPageLayoutRequestWithBody generates requests for UpdateEntityPageLayout with any type of body
func NewUpdateEntityPageLayoutRequestWithBody(server string, orgId string, portalName string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/entitypagelayouts/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIntegrationsRequest generates requests for GetIntegrations
func NewGetIntegrationsRequest(server string, orgId string, portalName string, params *GetIntegrationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/integrations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prev != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prev", runtime.ParamLocationQuery, *params.Prev); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Next != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next", runtime.ParamLocationQuery, *params.Next); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIntegrationRequest calls the generic CreateIntegration builder with application/json body
func NewCreateIntegrationRequest(server string, orgId string, portalName string, body CreateIntegrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIntegrationRequestWithBody(server, orgId, portalName, "application/json", bodyReader)
}

// NewCreateIntegrationRequestWithBody generates requests for CreateIntegration with any type of body
func NewCreateIntegrationRequestWithBody(server string, orgId string, portalName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/integrations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIntegrationRequest generates requests for DeleteIntegration
func NewDeleteIntegrationRequest(server string, orgId string, portalName string, integrationName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "integrationName", runtime.ParamLocationPath, integrationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/integrations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIntegrationRequest generates requests for GetIntegration
func NewGetIntegrationRequest(server string, orgId string, portalName string, integrationName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "integrationName", runtime.ParamLocationPath, integrationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/integrations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIntegrationRequest calls the generic UpdateIntegration builder with application/json body
func NewUpdateIntegrationRequest(server string, orgId string, portalName string, integrationName string, body UpdateIntegrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIntegrationRequestWithBody(server, orgId, portalName, integrationName, "application/json", bodyReader)
}

// NewUpdateIntegrationRequestWithBody generates requests for UpdateIntegration with any type of body
func NewUpdateIntegrationRequestWithBody(server string, orgId string, portalName string, integrationName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "integrationName", runtime.ParamLocationPath, integrationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/integrations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPluginConfigurationsRequest generates requests for GetPluginConfigurations
func NewGetPluginConfigurationsRequest(server string, orgId string, portalName string, params *GetPluginConfigurationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/pluginconfigurations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prev != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prev", runtime.ParamLocationQuery, *params.Prev); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Next != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next", runtime.ParamLocationQuery, *params.Next); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePluginConfigurationRequest calls the generic CreatePluginConfiguration builder with application/json body
func NewCreatePluginConfigurationRequest(server string, orgId string, portalName string, body CreatePluginConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePluginConfigurationRequestWithBody(server, orgId, portalName, "application/json", bodyReader)
}

// NewCreatePluginConfigurationRequestWithBody generates requests for CreatePluginConfiguration with any type of body
func NewCreatePluginConfigurationRequestWithBody(server string, orgId string, portalName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/pluginconfigurations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePluginConfigurationRequest generates requests for DeletePluginConfiguration
func NewDeletePluginConfigurationRequest(server string, orgId string, portalName string, pluginName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pluginName", runtime.ParamLocationPath, pluginName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/pluginconfigurations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPluginConfigurationRequest generates requests for GetPluginConfiguration
func NewGetPluginConfigurationRequest(server string, orgId string, portalName string, pluginName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pluginName", runtime.ParamLocationPath, pluginName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/pluginconfigurations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePluginConfigurationRequest calls the generic UpdatePluginConfiguration builder with application/json body
func NewUpdatePluginConfigurationRequest(server string, orgId string, portalName string, pluginName string, body UpdatePluginConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePluginConfigurationRequestWithBody(server, orgId, portalName, pluginName, "application/json", bodyReader)
}

// NewUpdatePluginConfigurationRequestWithBody generates requests for UpdatePluginConfiguration with any type of body
func NewUpdatePluginConfigurationRequestWithBody(server string, orgId string, portalName string, pluginName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pluginName", runtime.ParamLocationPath, pluginName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/pluginconfigurations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPortalProxiesRequest generates requests for GetPortalProxies
func NewGetPortalProxiesRequest(server string, orgId string, portalName string, params *GetPortalProxiesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/proxies", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prev != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prev", runtime.ParamLocationQuery, *params.Prev); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Next != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next", runtime.ParamLocationQuery, *params.Next); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePortalProxyRequest calls the generic CreatePortalProxy builder with application/json body
func NewCreatePortalProxyRequest(server string, orgId string, portalName string, body CreatePortalProxyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePortalProxyRequestWithBody(server, orgId, portalName, "application/json", bodyReader)
}

// NewCreatePortalProxyRequestWithBody generates requests for CreatePortalProxy with any type of body
func NewCreatePortalProxyRequestWithBody(server string, orgId string, portalName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/proxies", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePortalProxyRequest generates requests for DeletePortalProxy
func NewDeletePortalProxyRequest(server string, orgId string, portalName string, proxyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "proxyName", runtime.ParamLocationPath, proxyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/proxies/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPortalProxyRequest generates requests for GetPortalProxy
func NewGetPortalProxyRequest(server string, orgId string, portalName string, proxyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "proxyName", runtime.ParamLocationPath, proxyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/proxies/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePortalProxyRequest calls the generic UpdatePortalProxy builder with application/json body
func NewUpdatePortalProxyRequest(server string, orgId string, portalName string, proxyName string, body UpdatePortalProxyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePortalProxyRequestWithBody(server, orgId, portalName, proxyName, "application/json", bodyReader)
}

// NewUpdatePortalProxyRequestWithBody generates requests for UpdatePortalProxy with any type of body
func NewUpdatePortalProxyRequestWithBody(server string, orgId string, portalName string, proxyName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "proxyName", runtime.ParamLocationPath, proxyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/proxies/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPortalStatusRequest generates requests for GetPortalStatus
func NewGetPortalStatusRequest(server string, orgId string, portalName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "portalName", runtime.ParamLocationPath, portalName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/portals/%s/status", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTenantsRequest generates requests for GetTenants
func NewGetTenantsRequest(server string, orgId string, params *GetTenantsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/tenants", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prev != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prev", runtime.ParamLocationQuery, *params.Prev); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Next != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next", runtime.ParamLocationQuery, *params.Next); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTenantRequest calls the generic CreateTenant builder with application/json body
func NewCreateTenantRequest(server string, orgId string, body CreateTenantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTenantRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateTenantRequestWithBody generates requests for CreateTenant with any type of body
func NewCreateTenantRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/tenants", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTenantRequest generates requests for DeleteTenant
func NewDeleteTenantRequest(server string, orgId string, tenantName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/tenants/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTenantRequest generates requests for GetTenant
func NewGetTenantRequest(server string, orgId string, tenantName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/tenants/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTenantRequest calls the generic UpdateTenant builder with application/json body
func NewUpdateTenantRequest(server string, orgId string, tenantName string, body UpdateTenantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTenantRequestWithBody(server, orgId, tenantName, "application/json", bodyReader)
}

// NewUpdateTenantRequestWithBody generates requests for UpdateTenant with any type of body
func NewUpdateTenantRequestWithBody(server string, orgId string, tenantName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/tenants/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdentityProvidersRequest generates requests for GetIdentityProviders
func NewGetIdentityProvidersRequest(server string, orgId string, tenantName string, params *GetIdentityProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/tenants/%s/identityproviders", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prev != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prev", runtime.ParamLocationQuery, *params.Prev); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Next != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next", runtime.ParamLocationQuery, *params.Next); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIdentityProviderRequest calls the generic CreateIdentityProvider builder with application/json body
func NewCreateIdentityProviderRequest(server string, orgId string, tenantName string, body CreateIdentityProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIdentityProviderRequestWithBody(server, orgId, tenantName, "application/json", bodyReader)
}

// NewCreateIdentityProviderRequestWithBody generates requests for CreateIdentityProvider with any type of body
func NewCreateIdentityProviderRequestWithBody(server string, orgId string, tenantName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/tenants/%s/identityproviders", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdentityProviderRequest generates requests for DeleteIdentityProvider
func NewDeleteIdentityProviderRequest(server string, orgId string, tenantName string, providerName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerName", runtime.ParamLocationPath, providerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/tenants/%s/identityproviders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdentityProviderRequest generates requests for GetIdentityProvider
func NewGetIdentityProviderRequest(server string, orgId string, tenantName string, providerName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerName", runtime.ParamLocationPath, providerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/tenants/%s/identityproviders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIdentityProviderRequest calls the generic UpdateIdentityProvider builder with application/json body
func NewUpdateIdentityProviderRequest(server string, orgId string, tenantName string, providerName string, body UpdateIdentityProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIdentityProviderRequestWithBody(server, orgId, tenantName, providerName, "application/json", bodyReader)
}

// NewUpdateIdentityProviderRequestWithBody generates requests for UpdateIdentityProvider with any type of body
func NewUpdateIdentityProviderRequestWithBody(server string, orgId string, tenantName string, providerName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerName", runtime.ParamLocationPath, providerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/tenants/%s/identityproviders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTenantUsersRequest generates requests for GetTenantUsers
func NewGetTenantUsersRequest(server string, orgId string, tenantName string, params *GetTenantUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/tenants/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prev != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prev", runtime.ParamLocationQuery, *params.Prev); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Next != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next", runtime.ParamLocationQuery, *params.Next); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTenantUserRequest calls the generic CreateTenantUser builder with application/json body
func NewCreateTenantUserRequest(server string, orgId string, tenantName string, body CreateTenantUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTenantUserRequestWithBody(server, orgId, tenantName, "application/json", bodyReader)
}

// NewCreateTenantUserRequestWithBody generates requests for CreateTenantUser with any type of body
func NewCreateTenantUserRequestWithBody(server string, orgId string, tenantName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/tenants/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTenantUserRequest generates requests for DeleteTenantUser
func NewDeleteTenantUserRequest(server string, orgId string, tenantName string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/tenants/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTenantUserRequest generates requests for GetTenantUser
func NewGetTenantUserRequest(server string, orgId string, tenantName string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tenantName", runtime.ParamLocationPath, tenantName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/tenants/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetClustersWithResponse request
	GetClustersWithResponse(ctx context.Context, params *GetClustersParams, reqEditors ...RequestEditorFn) (*GetClustersResponse, error)

	// GetClusterByIdWithResponse request
	GetClusterByIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetClusterByIdResponse, error)

	// GetOrganizationsWithResponse request
	GetOrganizationsWithResponse(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error)

	// CreateOrganizationWithBodyWithResponse request with any body
	CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	// DeleteOrganizationByIDWithResponse request
	DeleteOrganizationByIDWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*DeleteOrganizationByIDResponse, error)

	// GetOrganizationByIDWithResponse request
	GetOrganizationByIDWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrganizationByIDResponse, error)

	// UpdateOrganizationByIDWithBodyWithResponse request with any body
	UpdateOrganizationByIDWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationByIDResponse, error)

	UpdateOrganizationByIDWithResponse(ctx context.Context, orgId string, body UpdateOrganizationByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationByIDResponse, error)

	// GetPortalsWithResponse request
	GetPortalsWithResponse(ctx context.Context, orgId string, params *GetPortalsParams, reqEditors ...RequestEditorFn) (*GetPortalsResponse, error)

	// CreatePortalWithBodyWithResponse request with any body
	CreatePortalWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePortalResponse, error)

	CreatePortalWithResponse(ctx context.Context, orgId string, body CreatePortalJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePortalResponse, error)

	// DeletePortalWithResponse request
	DeletePortalWithResponse(ctx context.Context, orgId string, portalName string, reqEditors ...RequestEditorFn) (*DeletePortalResponse, error)

	// GetPortalWithResponse request
	GetPortalWithResponse(ctx context.Context, orgId string, portalName string, reqEditors ...RequestEditorFn) (*GetPortalResponse, error)

	// UpdatePortalWithBodyWithResponse request with any body
	UpdatePortalWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePortalResponse, error)

	UpdatePortalWithResponse(ctx context.Context, orgId string, portalName string, body UpdatePortalJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePortalResponse, error)

	// GetAuthProvidersWithResponse request
	GetAuthProvidersWithResponse(ctx context.Context, orgId string, portalName string, params *GetAuthProvidersParams, reqEditors ...RequestEditorFn) (*GetAuthProvidersResponse, error)

	// CreateAuthProviderWithBodyWithResponse request with any body
	CreateAuthProviderWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthProviderResponse, error)

	CreateAuthProviderWithResponse(ctx context.Context, orgId string, portalName string, body CreateAuthProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthProviderResponse, error)

	// DeleteAuthProviderWithResponse request
	DeleteAuthProviderWithResponse(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*DeleteAuthProviderResponse, error)

	// GetAuthProviderWithResponse request
	GetAuthProviderWithResponse(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*GetAuthProviderResponse, error)

	// UpdateAuthProviderWithBodyWithResponse request with any body
	UpdateAuthProviderWithBodyWithResponse(ctx context.Context, orgId string, portalName string, providerName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAuthProviderResponse, error)

	UpdateAuthProviderWithResponse(ctx context.Context, orgId string, portalName string, providerName string, body UpdateAuthProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAuthProviderResponse, error)

	// GetCatalogProvidersWithResponse request
	GetCatalogProvidersWithResponse(ctx context.Context, orgId string, portalName string, params *GetCatalogProvidersParams, reqEditors ...RequestEditorFn) (*GetCatalogProvidersResponse, error)

	// CreateCatalogProviderWithBodyWithResponse request with any body
	CreateCatalogProviderWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogProviderResponse, error)

	CreateCatalogProviderWithResponse(ctx context.Context, orgId string, portalName string, body CreateCatalogProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogProviderResponse, error)

	// DeleteCatalogProviderWithResponse request
	DeleteCatalogProviderWithResponse(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*DeleteCatalogProviderResponse, error)

	// GetCatalogProviderWithResponse request
	GetCatalogProviderWithResponse(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*GetCatalogProviderResponse, error)

	// UpdateCatalogProviderWithBodyWithResponse request with any body
	UpdateCatalogProviderWithBodyWithResponse(ctx context.Context, orgId string, portalName string, providerName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogProviderResponse, error)

	UpdateCatalogProviderWithResponse(ctx context.Context, orgId string, portalName string, providerName string, body UpdateCatalogProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogProviderResponse, error)

	// GetConnectionsWithResponse request
	GetConnectionsWithResponse(ctx context.Context, orgId string, portalName string, params *GetConnectionsParams, reqEditors ...RequestEditorFn) (*GetConnectionsResponse, error)

	// CreateConnectionWithBodyWithResponse request with any body
	CreateConnectionWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error)

	CreateConnectionWithResponse(ctx context.Context, orgId string, portalName string, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error)

	// DeleteConnectionWithResponse request
	DeleteConnectionWithResponse(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*DeleteConnectionResponse, error)

	// GetConnectionWithResponse request
	GetConnectionWithResponse(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*GetConnectionResponse, error)

	// UpdateConnectionWithBodyWithResponse request with any body
	UpdateConnectionWithBodyWithResponse(ctx context.Context, orgId string, portalName string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error)

	UpdateConnectionWithResponse(ctx context.Context, orgId string, portalName string, name string, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error)

	// GetEntityPageLayoutsWithResponse request
	GetEntityPageLayoutsWithResponse(ctx context.Context, orgId string, portalName string, params *GetEntityPageLayoutsParams, reqEditors ...RequestEditorFn) (*GetEntityPageLayoutsResponse, error)

	// CreateEntityPageLayoutWithBodyWithResponse request with any body
	CreateEntityPageLayoutWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEntityPageLayoutResponse, error)

	CreateEntityPageLayoutWithResponse(ctx context.Context, orgId string, portalName string, body CreateEntityPageLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEntityPageLayoutResponse, error)

	// DeleteEntityPageLayoutWithResponse request
	DeleteEntityPageLayoutWithResponse(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*DeleteEntityPageLayoutResponse, error)

	// GetEntityPageLayoutWithResponse request
	GetEntityPageLayoutWithResponse(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*GetEntityPageLayoutResponse, error)

	// UpdateEntityPageLayoutWithBodyWithResponse request with any body
	UpdateEntityPageLayoutWithBodyWithResponse(ctx context.Context, orgId string, portalName string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEntityPageLayoutResponse, error)

	UpdateEntityPageLayoutWithResponse(ctx context.Context, orgId string, portalName string, name string, body UpdateEntityPageLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEntityPageLayoutResponse, error)

	// GetIntegrationsWithResponse request
	GetIntegrationsWithResponse(ctx context.Context, orgId string, portalName string, params *GetIntegrationsParams, reqEditors ...RequestEditorFn) (*GetIntegrationsResponse, error)

	// CreateIntegrationWithBodyWithResponse request with any body
	CreateIntegrationWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIntegrationResponse, error)

	CreateIntegrationWithResponse(ctx context.Context, orgId string, portalName string, body CreateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIntegrationResponse, error)

	// DeleteIntegrationWithResponse request
	DeleteIntegrationWithResponse(ctx context.Context, orgId string, portalName string, integrationName string, reqEditors ...RequestEditorFn) (*DeleteIntegrationResponse, error)

	// GetIntegrationWithResponse request
	GetIntegrationWithResponse(ctx context.Context, orgId string, portalName string, integrationName string, reqEditors ...RequestEditorFn) (*GetIntegrationResponse, error)

	// UpdateIntegrationWithBodyWithResponse request with any body
	UpdateIntegrationWithBodyWithResponse(ctx context.Context, orgId string, portalName string, integrationName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIntegrationResponse, error)

	UpdateIntegrationWithResponse(ctx context.Context, orgId string, portalName string, integrationName string, body UpdateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIntegrationResponse, error)

	// GetPluginConfigurationsWithResponse request
	GetPluginConfigurationsWithResponse(ctx context.Context, orgId string, portalName string, params *GetPluginConfigurationsParams, reqEditors ...RequestEditorFn) (*GetPluginConfigurationsResponse, error)

	// CreatePluginConfigurationWithBodyWithResponse request with any body
	CreatePluginConfigurationWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePluginConfigurationResponse, error)

	CreatePluginConfigurationWithResponse(ctx context.Context, orgId string, portalName string, body CreatePluginConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePluginConfigurationResponse, error)

	// DeletePluginConfigurationWithResponse request
	DeletePluginConfigurationWithResponse(ctx context.Context, orgId string, portalName string, pluginName string, reqEditors ...RequestEditorFn) (*DeletePluginConfigurationResponse, error)

	// GetPluginConfigurationWithResponse request
	GetPluginConfigurationWithResponse(ctx context.Context, orgId string, portalName string, pluginName string, reqEditors ...RequestEditorFn) (*GetPluginConfigurationResponse, error)

	// UpdatePluginConfigurationWithBodyWithResponse request with any body
	UpdatePluginConfigurationWithBodyWithResponse(ctx context.Context, orgId string, portalName string, pluginName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePluginConfigurationResponse, error)

	UpdatePluginConfigurationWithResponse(ctx context.Context, orgId string, portalName string, pluginName string, body UpdatePluginConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePluginConfigurationResponse, error)

	// GetPortalProxiesWithResponse request
	GetPortalProxiesWithResponse(ctx context.Context, orgId string, portalName string, params *GetPortalProxiesParams, reqEditors ...RequestEditorFn) (*GetPortalProxiesResponse, error)

	// CreatePortalProxyWithBodyWithResponse request with any body
	CreatePortalProxyWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePortalProxyResponse, error)

	CreatePortalProxyWithResponse(ctx context.Context, orgId string, portalName string, body CreatePortalProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePortalProxyResponse, error)

	// DeletePortalProxyWithResponse request
	DeletePortalProxyWithResponse(ctx context.Context, orgId string, portalName string, proxyName string, reqEditors ...RequestEditorFn) (*DeletePortalProxyResponse, error)

	// GetPortalProxyWithResponse request
	GetPortalProxyWithResponse(ctx context.Context, orgId string, portalName string, proxyName string, reqEditors ...RequestEditorFn) (*GetPortalProxyResponse, error)

	// UpdatePortalProxyWithBodyWithResponse request with any body
	UpdatePortalProxyWithBodyWithResponse(ctx context.Context, orgId string, portalName string, proxyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePortalProxyResponse, error)

	UpdatePortalProxyWithResponse(ctx context.Context, orgId string, portalName string, proxyName string, body UpdatePortalProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePortalProxyResponse, error)

	// GetPortalStatusWithResponse request
	GetPortalStatusWithResponse(ctx context.Context, orgId string, portalName string, reqEditors ...RequestEditorFn) (*GetPortalStatusResponse, error)

	// GetTenantsWithResponse request
	GetTenantsWithResponse(ctx context.Context, orgId string, params *GetTenantsParams, reqEditors ...RequestEditorFn) (*GetTenantsResponse, error)

	// CreateTenantWithBodyWithResponse request with any body
	CreateTenantWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTenantResponse, error)

	CreateTenantWithResponse(ctx context.Context, orgId string, body CreateTenantJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTenantResponse, error)

	// DeleteTenantWithResponse request
	DeleteTenantWithResponse(ctx context.Context, orgId string, tenantName string, reqEditors ...RequestEditorFn) (*DeleteTenantResponse, error)

	// GetTenantWithResponse request
	GetTenantWithResponse(ctx context.Context, orgId string, tenantName string, reqEditors ...RequestEditorFn) (*GetTenantResponse, error)

	// UpdateTenantWithBodyWithResponse request with any body
	UpdateTenantWithBodyWithResponse(ctx context.Context, orgId string, tenantName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTenantResponse, error)

	UpdateTenantWithResponse(ctx context.Context, orgId string, tenantName string, body UpdateTenantJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTenantResponse, error)

	// GetIdentityProvidersWithResponse request
	GetIdentityProvidersWithResponse(ctx context.Context, orgId string, tenantName string, params *GetIdentityProvidersParams, reqEditors ...RequestEditorFn) (*GetIdentityProvidersResponse, error)

	// CreateIdentityProviderWithBodyWithResponse request with any body
	CreateIdentityProviderWithBodyWithResponse(ctx context.Context, orgId string, tenantName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIdentityProviderResponse, error)

	CreateIdentityProviderWithResponse(ctx context.Context, orgId string, tenantName string, body CreateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIdentityProviderResponse, error)

	// DeleteIdentityProviderWithResponse request
	DeleteIdentityProviderWithResponse(ctx context.Context, orgId string, tenantName string, providerName string, reqEditors ...RequestEditorFn) (*DeleteIdentityProviderResponse, error)

	// GetIdentityProviderWithResponse request
	GetIdentityProviderWithResponse(ctx context.Context, orgId string, tenantName string, providerName string, reqEditors ...RequestEditorFn) (*GetIdentityProviderResponse, error)

	// UpdateIdentityProviderWithBodyWithResponse request with any body
	UpdateIdentityProviderWithBodyWithResponse(ctx context.Context, orgId string, tenantName string, providerName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIdentityProviderResponse, error)

	UpdateIdentityProviderWithResponse(ctx context.Context, orgId string, tenantName string, providerName string, body UpdateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIdentityProviderResponse, error)

	// GetTenantUsersWithResponse request
	GetTenantUsersWithResponse(ctx context.Context, orgId string, tenantName string, params *GetTenantUsersParams, reqEditors ...RequestEditorFn) (*GetTenantUsersResponse, error)

	// CreateTenantUserWithBodyWithResponse request with any body
	CreateTenantUserWithBodyWithResponse(ctx context.Context, orgId string, tenantName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTenantUserResponse, error)

	CreateTenantUserWithResponse(ctx context.Context, orgId string, tenantName string, body CreateTenantUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTenantUserResponse, error)

	// DeleteTenantUserWithResponse request
	DeleteTenantUserWithResponse(ctx context.Context, orgId string, tenantName string, username string, reqEditors ...RequestEditorFn) (*DeleteTenantUserResponse, error)

	// GetTenantUserWithResponse request
	GetTenantUserWithResponse(ctx context.Context, orgId string, tenantName string, username string, reqEditors ...RequestEditorFn) (*GetTenantUserResponse, error)
}

type GetClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClustersListResponse
}

// Status returns HTTPResponse.Status
func (r GetClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
}

// Status returns HTTPResponse.Status
func (r GetClusterByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationsListResponse
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Organization
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r GetOrganizationByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPortalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PortalsListResponse
}

// Status returns HTTPResponse.Status
func (r GetPortalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPortalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePortalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Portal
}

// Status returns HTTPResponse.Status
func (r CreatePortalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePortalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePortalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePortalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePortalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPortalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Portal
}

// Status returns HTTPResponse.Status
func (r GetPortalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPortalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePortalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Portal
}

// Status returns HTTPResponse.Status
func (r UpdatePortalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePortalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthProvidersListResponse
}

// Status returns HTTPResponse.Status
func (r GetAuthProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthProvider
}

// Status returns HTTPResponse.Status
func (r CreateAuthProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAuthProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthProvider
}

// Status returns HTTPResponse.Status
func (r GetAuthProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAuthProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthProvider
}

// Status returns HTTPResponse.Status
func (r UpdateAuthProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAuthProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CatalogProvidersListResponse
}

// Status returns HTTPResponse.Status
func (r GetCatalogProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CatalogProvider
}

// Status returns HTTPResponse.Status
func (r CreateCatalogProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCatalogProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCatalogProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCatalogProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CatalogProvider
}

// Status returns HTTPResponse.Status
func (r GetCatalogProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCatalogProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CatalogProvider
}

// Status returns HTTPResponse.Status
func (r UpdateCatalogProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCatalogProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionsListResponse
}

// Status returns HTTPResponse.Status
func (r GetConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Connection
}

// Status returns HTTPResponse.Status
func (r CreateConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Connection
}

// Status returns HTTPResponse.Status
func (r GetConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Connection
}

// Status returns HTTPResponse.Status
func (r UpdateConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEntityPageLayoutsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityPageLayoutsListResponse
}

// Status returns HTTPResponse.Status
func (r GetEntityPageLayoutsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntityPageLayoutsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEntityPageLayoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EntityPageLayout
}

// Status returns HTTPResponse.Status
func (r CreateEntityPageLayoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEntityPageLayoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEntityPageLayoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEntityPageLayoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEntityPageLayoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEntityPageLayoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityPageLayout
}

// Status returns HTTPResponse.Status
func (r GetEntityPageLayoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntityPageLayoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEntityPageLayoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityPageLayout
}

// Status returns HTTPResponse.Status
func (r UpdateEntityPageLayoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEntityPageLayoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIntegrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationsListResponse
}

// Status returns HTTPResponse.Status
func (r GetIntegrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIntegrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Integration
}

// Status returns HTTPResponse.Status
func (r CreateIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
}

// Status returns HTTPResponse.Status
func (r GetIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
}

// Status returns HTTPResponse.Status
func (r UpdateIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPluginConfigurationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PluginConfigurationsListResponse
}

// Status returns HTTPResponse.Status
func (r GetPluginConfigurationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPluginConfigurationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePluginConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PluginConfiguration
}

// Status returns HTTPResponse.Status
func (r CreatePluginConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePluginConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePluginConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePluginConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePluginConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPluginConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PluginConfiguration
}

// Status returns HTTPResponse.Status
func (r GetPluginConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPluginConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePluginConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PluginConfiguration
}

// Status returns HTTPResponse.Status
func (r UpdatePluginConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePluginConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPortalProxiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PortalProxiesListResponse
}

// Status returns HTTPResponse.Status
func (r GetPortalProxiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPortalProxiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePortalProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PortalProxy
}

// Status returns HTTPResponse.Status
func (r CreatePortalProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePortalProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePortalProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePortalProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePortalProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPortalProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PortalProxy
}

// Status returns HTTPResponse.Status
func (r GetPortalProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPortalProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePortalProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PortalProxy
}

// Status returns HTTPResponse.Status
func (r UpdatePortalProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePortalProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPortalStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PortalStatus
}

// Status returns HTTPResponse.Status
func (r GetPortalStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPortalStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TenantsListResponse
}

// Status returns HTTPResponse.Status
func (r GetTenantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Tenant
}

// Status returns HTTPResponse.Status
func (r CreateTenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tenant
}

// Status returns HTTPResponse.Status
func (r GetTenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tenant
}

// Status returns HTTPResponse.Status
func (r UpdateTenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentityProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProvidersListResponse
}

// Status returns HTTPResponse.Status
func (r GetIdentityProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentityProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IdentityProvider
}

// Status returns HTTPResponse.Status
func (r CreateIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProvider
}

// Status returns HTTPResponse.Status
func (r GetIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProvider
}

// Status returns HTTPResponse.Status
func (r UpdateIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenantUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TenantUsersListResponse
}

// Status returns HTTPResponse.Status
func (r GetTenantUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTenantUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TenantUser
}

// Status returns HTTPResponse.Status
func (r CreateTenantUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTenantUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTenantUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTenantUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTenantUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenantUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TenantUser
}

// Status returns HTTPResponse.Status
func (r GetTenantUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetClustersWithResponse request returning *GetClustersResponse
func (c *ClientWithResponses) GetClustersWithResponse(ctx context.Context, params *GetClustersParams, reqEditors ...RequestEditorFn) (*GetClustersResponse, error) {
	rsp, err := c.GetClusters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClustersResponse(rsp)
}

// GetClusterByIdWithResponse request returning *GetClusterByIdResponse
func (c *ClientWithResponses) GetClusterByIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetClusterByIdResponse, error) {
	rsp, err := c.GetClusterById(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterByIdResponse(rsp)
}

// GetOrganizationsWithResponse request returning *GetOrganizationsResponse
func (c *ClientWithResponses) GetOrganizationsWithResponse(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error) {
	rsp, err := c.GetOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsResponse(rsp)
}

// CreateOrganizationWithBodyWithResponse request with arbitrary body returning *CreateOrganizationResponse
func (c *ClientWithResponses) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

// DeleteOrganizationByIDWithResponse request returning *DeleteOrganizationByIDResponse
func (c *ClientWithResponses) DeleteOrganizationByIDWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*DeleteOrganizationByIDResponse, error) {
	rsp, err := c.DeleteOrganizationByID(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationByIDResponse(rsp)
}

// GetOrganizationByIDWithResponse request returning *GetOrganizationByIDResponse
func (c *ClientWithResponses) GetOrganizationByIDWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrganizationByIDResponse, error) {
	rsp, err := c.GetOrganizationByID(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationByIDResponse(rsp)
}

// UpdateOrganizationByIDWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationByIDResponse
func (c *ClientWithResponses) UpdateOrganizationByIDWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationByIDResponse, error) {
	rsp, err := c.UpdateOrganizationByIDWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationByIDResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationByIDWithResponse(ctx context.Context, orgId string, body UpdateOrganizationByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationByIDResponse, error) {
	rsp, err := c.UpdateOrganizationByID(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationByIDResponse(rsp)
}

// GetPortalsWithResponse request returning *GetPortalsResponse
func (c *ClientWithResponses) GetPortalsWithResponse(ctx context.Context, orgId string, params *GetPortalsParams, reqEditors ...RequestEditorFn) (*GetPortalsResponse, error) {
	rsp, err := c.GetPortals(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPortalsResponse(rsp)
}

// CreatePortalWithBodyWithResponse request with arbitrary body returning *CreatePortalResponse
func (c *ClientWithResponses) CreatePortalWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePortalResponse, error) {
	rsp, err := c.CreatePortalWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePortalResponse(rsp)
}

func (c *ClientWithResponses) CreatePortalWithResponse(ctx context.Context, orgId string, body CreatePortalJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePortalResponse, error) {
	rsp, err := c.CreatePortal(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePortalResponse(rsp)
}

// DeletePortalWithResponse request returning *DeletePortalResponse
func (c *ClientWithResponses) DeletePortalWithResponse(ctx context.Context, orgId string, portalName string, reqEditors ...RequestEditorFn) (*DeletePortalResponse, error) {
	rsp, err := c.DeletePortal(ctx, orgId, portalName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePortalResponse(rsp)
}

// GetPortalWithResponse request returning *GetPortalResponse
func (c *ClientWithResponses) GetPortalWithResponse(ctx context.Context, orgId string, portalName string, reqEditors ...RequestEditorFn) (*GetPortalResponse, error) {
	rsp, err := c.GetPortal(ctx, orgId, portalName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPortalResponse(rsp)
}

// UpdatePortalWithBodyWithResponse request with arbitrary body returning *UpdatePortalResponse
func (c *ClientWithResponses) UpdatePortalWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePortalResponse, error) {
	rsp, err := c.UpdatePortalWithBody(ctx, orgId, portalName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePortalResponse(rsp)
}

func (c *ClientWithResponses) UpdatePortalWithResponse(ctx context.Context, orgId string, portalName string, body UpdatePortalJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePortalResponse, error) {
	rsp, err := c.UpdatePortal(ctx, orgId, portalName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePortalResponse(rsp)
}

// GetAuthProvidersWithResponse request returning *GetAuthProvidersResponse
func (c *ClientWithResponses) GetAuthProvidersWithResponse(ctx context.Context, orgId string, portalName string, params *GetAuthProvidersParams, reqEditors ...RequestEditorFn) (*GetAuthProvidersResponse, error) {
	rsp, err := c.GetAuthProviders(ctx, orgId, portalName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthProvidersResponse(rsp)
}

// CreateAuthProviderWithBodyWithResponse request with arbitrary body returning *CreateAuthProviderResponse
func (c *ClientWithResponses) CreateAuthProviderWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthProviderResponse, error) {
	rsp, err := c.CreateAuthProviderWithBody(ctx, orgId, portalName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthProviderResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthProviderWithResponse(ctx context.Context, orgId string, portalName string, body CreateAuthProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthProviderResponse, error) {
	rsp, err := c.CreateAuthProvider(ctx, orgId, portalName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthProviderResponse(rsp)
}

// DeleteAuthProviderWithResponse request returning *DeleteAuthProviderResponse
func (c *ClientWithResponses) DeleteAuthProviderWithResponse(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*DeleteAuthProviderResponse, error) {
	rsp, err := c.DeleteAuthProvider(ctx, orgId, portalName, providerName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthProviderResponse(rsp)
}

// GetAuthProviderWithResponse request returning *GetAuthProviderResponse
func (c *ClientWithResponses) GetAuthProviderWithResponse(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*GetAuthProviderResponse, error) {
	rsp, err := c.GetAuthProvider(ctx, orgId, portalName, providerName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthProviderResponse(rsp)
}

// UpdateAuthProviderWithBodyWithResponse request with arbitrary body returning *UpdateAuthProviderResponse
func (c *ClientWithResponses) UpdateAuthProviderWithBodyWithResponse(ctx context.Context, orgId string, portalName string, providerName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAuthProviderResponse, error) {
	rsp, err := c.UpdateAuthProviderWithBody(ctx, orgId, portalName, providerName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthProviderResponse(rsp)
}

func (c *ClientWithResponses) UpdateAuthProviderWithResponse(ctx context.Context, orgId string, portalName string, providerName string, body UpdateAuthProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAuthProviderResponse, error) {
	rsp, err := c.UpdateAuthProvider(ctx, orgId, portalName, providerName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthProviderResponse(rsp)
}

// GetCatalogProvidersWithResponse request returning *GetCatalogProvidersResponse
func (c *ClientWithResponses) GetCatalogProvidersWithResponse(ctx context.Context, orgId string, portalName string, params *GetCatalogProvidersParams, reqEditors ...RequestEditorFn) (*GetCatalogProvidersResponse, error) {
	rsp, err := c.GetCatalogProviders(ctx, orgId, portalName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogProvidersResponse(rsp)
}

// CreateCatalogProviderWithBodyWithResponse request with arbitrary body returning *CreateCatalogProviderResponse
func (c *ClientWithResponses) CreateCatalogProviderWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogProviderResponse, error) {
	rsp, err := c.CreateCatalogProviderWithBody(ctx, orgId, portalName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogProviderResponse(rsp)
}

func (c *ClientWithResponses) CreateCatalogProviderWithResponse(ctx context.Context, orgId string, portalName string, body CreateCatalogProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogProviderResponse, error) {
	rsp, err := c.CreateCatalogProvider(ctx, orgId, portalName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogProviderResponse(rsp)
}

// DeleteCatalogProviderWithResponse request returning *DeleteCatalogProviderResponse
func (c *ClientWithResponses) DeleteCatalogProviderWithResponse(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*DeleteCatalogProviderResponse, error) {
	rsp, err := c.DeleteCatalogProvider(ctx, orgId, portalName, providerName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCatalogProviderResponse(rsp)
}

// GetCatalogProviderWithResponse request returning *GetCatalogProviderResponse
func (c *ClientWithResponses) GetCatalogProviderWithResponse(ctx context.Context, orgId string, portalName string, providerName string, reqEditors ...RequestEditorFn) (*GetCatalogProviderResponse, error) {
	rsp, err := c.GetCatalogProvider(ctx, orgId, portalName, providerName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogProviderResponse(rsp)
}

// UpdateCatalogProviderWithBodyWithResponse request with arbitrary body returning *UpdateCatalogProviderResponse
func (c *ClientWithResponses) UpdateCatalogProviderWithBodyWithResponse(ctx context.Context, orgId string, portalName string, providerName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogProviderResponse, error) {
	rsp, err := c.UpdateCatalogProviderWithBody(ctx, orgId, portalName, providerName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogProviderResponse(rsp)
}

func (c *ClientWithResponses) UpdateCatalogProviderWithResponse(ctx context.Context, orgId string, portalName string, providerName string, body UpdateCatalogProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogProviderResponse, error) {
	rsp, err := c.UpdateCatalogProvider(ctx, orgId, portalName, providerName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogProviderResponse(rsp)
}

// GetConnectionsWithResponse request returning *GetConnectionsResponse
func (c *ClientWithResponses) GetConnectionsWithResponse(ctx context.Context, orgId string, portalName string, params *GetConnectionsParams, reqEditors ...RequestEditorFn) (*GetConnectionsResponse, error) {
	rsp, err := c.GetConnections(ctx, orgId, portalName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionsResponse(rsp)
}

// CreateConnectionWithBodyWithResponse request with arbitrary body returning *CreateConnectionResponse
func (c *ClientWithResponses) CreateConnectionWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error) {
	rsp, err := c.CreateConnectionWithBody(ctx, orgId, portalName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectionResponse(rsp)
}

func (c *ClientWithResponses) CreateConnectionWithResponse(ctx context.Context, orgId string, portalName string, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error) {
	rsp, err := c.CreateConnection(ctx, orgId, portalName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectionResponse(rsp)
}

// DeleteConnectionWithResponse request returning *DeleteConnectionResponse
func (c *ClientWithResponses) DeleteConnectionWithResponse(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*DeleteConnectionResponse, error) {
	rsp, err := c.DeleteConnection(ctx, orgId, portalName, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConnectionResponse(rsp)
}

// GetConnectionWithResponse request returning *GetConnectionResponse
func (c *ClientWithResponses) GetConnectionWithResponse(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*GetConnectionResponse, error) {
	rsp, err := c.GetConnection(ctx, orgId, portalName, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionResponse(rsp)
}

// UpdateConnectionWithBodyWithResponse request with arbitrary body returning *UpdateConnectionResponse
func (c *ClientWithResponses) UpdateConnectionWithBodyWithResponse(ctx context.Context, orgId string, portalName string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error) {
	rsp, err := c.UpdateConnectionWithBody(ctx, orgId, portalName, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectionResponse(rsp)
}

func (c *ClientWithResponses) UpdateConnectionWithResponse(ctx context.Context, orgId string, portalName string, name string, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error) {
	rsp, err := c.UpdateConnection(ctx, orgId, portalName, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectionResponse(rsp)
}

// GetEntityPageLayoutsWithResponse request returning *GetEntityPageLayoutsResponse
func (c *ClientWithResponses) GetEntityPageLayoutsWithResponse(ctx context.Context, orgId string, portalName string, params *GetEntityPageLayoutsParams, reqEditors ...RequestEditorFn) (*GetEntityPageLayoutsResponse, error) {
	rsp, err := c.GetEntityPageLayouts(ctx, orgId, portalName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntityPageLayoutsResponse(rsp)
}

// CreateEntityPageLayoutWithBodyWithResponse request with arbitrary body returning *CreateEntityPageLayoutResponse
func (c *ClientWithResponses) CreateEntityPageLayoutWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEntityPageLayoutResponse, error) {
	rsp, err := c.CreateEntityPageLayoutWithBody(ctx, orgId, portalName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEntityPageLayoutResponse(rsp)
}

func (c *ClientWithResponses) CreateEntityPageLayoutWithResponse(ctx context.Context, orgId string, portalName string, body CreateEntityPageLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEntityPageLayoutResponse, error) {
	rsp, err := c.CreateEntityPageLayout(ctx, orgId, portalName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEntityPageLayoutResponse(rsp)
}

// DeleteEntityPageLayoutWithResponse request returning *DeleteEntityPageLayoutResponse
func (c *ClientWithResponses) DeleteEntityPageLayoutWithResponse(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*DeleteEntityPageLayoutResponse, error) {
	rsp, err := c.DeleteEntityPageLayout(ctx, orgId, portalName, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEntityPageLayoutResponse(rsp)
}

// GetEntityPageLayoutWithResponse request returning *GetEntityPageLayoutResponse
func (c *ClientWithResponses) GetEntityPageLayoutWithResponse(ctx context.Context, orgId string, portalName string, name string, reqEditors ...RequestEditorFn) (*GetEntityPageLayoutResponse, error) {
	rsp, err := c.GetEntityPageLayout(ctx, orgId, portalName, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntityPageLayoutResponse(rsp)
}

// UpdateEntityPageLayoutWithBodyWithResponse request with arbitrary body returning *UpdateEntityPageLayoutResponse
func (c *ClientWithResponses) UpdateEntityPageLayoutWithBodyWithResponse(ctx context.Context, orgId string, portalName string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEntityPageLayoutResponse, error) {
	rsp, err := c.UpdateEntityPageLayoutWithBody(ctx, orgId, portalName, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEntityPageLayoutResponse(rsp)
}

func (c *ClientWithResponses) UpdateEntityPageLayoutWithResponse(ctx context.Context, orgId string, portalName string, name string, body UpdateEntityPageLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEntityPageLayoutResponse, error) {
	rsp, err := c.UpdateEntityPageLayout(ctx, orgId, portalName, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEntityPageLayoutResponse(rsp)
}

// GetIntegrationsWithResponse request returning *GetIntegrationsResponse
func (c *ClientWithResponses) GetIntegrationsWithResponse(ctx context.Context, orgId string, portalName string, params *GetIntegrationsParams, reqEditors ...RequestEditorFn) (*GetIntegrationsResponse, error) {
	rsp, err := c.GetIntegrations(ctx, orgId, portalName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIntegrationsResponse(rsp)
}

// CreateIntegrationWithBodyWithResponse request with arbitrary body returning *CreateIntegrationResponse
func (c *ClientWithResponses) CreateIntegrationWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIntegrationResponse, error) {
	rsp, err := c.CreateIntegrationWithBody(ctx, orgId, portalName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIntegrationResponse(rsp)
}

func (c *ClientWithResponses) CreateIntegrationWithResponse(ctx context.Context, orgId string, portalName string, body CreateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIntegrationResponse, error) {
	rsp, err := c.CreateIntegration(ctx, orgId, portalName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIntegrationResponse(rsp)
}

// DeleteIntegrationWithResponse request returning *DeleteIntegrationResponse
func (c *ClientWithResponses) DeleteIntegrationWithResponse(ctx context.Context, orgId string, portalName string, integrationName string, reqEditors ...RequestEditorFn) (*DeleteIntegrationResponse, error) {
	rsp, err := c.DeleteIntegration(ctx, orgId, portalName, integrationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIntegrationResponse(rsp)
}

// GetIntegrationWithResponse request returning *GetIntegrationResponse
func (c *ClientWithResponses) GetIntegrationWithResponse(ctx context.Context, orgId string, portalName string, integrationName string, reqEditors ...RequestEditorFn) (*GetIntegrationResponse, error) {
	rsp, err := c.GetIntegration(ctx, orgId, portalName, integrationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIntegrationResponse(rsp)
}

// UpdateIntegrationWithBodyWithResponse request with arbitrary body returning *UpdateIntegrationResponse
func (c *ClientWithResponses) UpdateIntegrationWithBodyWithResponse(ctx context.Context, orgId string, portalName string, integrationName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIntegrationResponse, error) {
	rsp, err := c.UpdateIntegrationWithBody(ctx, orgId, portalName, integrationName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIntegrationResponse(rsp)
}

func (c *ClientWithResponses) UpdateIntegrationWithResponse(ctx context.Context, orgId string, portalName string, integrationName string, body UpdateIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIntegrationResponse, error) {
	rsp, err := c.UpdateIntegration(ctx, orgId, portalName, integrationName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIntegrationResponse(rsp)
}

// GetPluginConfigurationsWithResponse request returning *GetPluginConfigurationsResponse
func (c *ClientWithResponses) GetPluginConfigurationsWithResponse(ctx context.Context, orgId string, portalName string, params *GetPluginConfigurationsParams, reqEditors ...RequestEditorFn) (*GetPluginConfigurationsResponse, error) {
	rsp, err := c.GetPluginConfigurations(ctx, orgId, portalName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPluginConfigurationsResponse(rsp)
}

// CreatePluginConfigurationWithBodyWithResponse request with arbitrary body returning *CreatePluginConfigurationResponse
func (c *ClientWithResponses) CreatePluginConfigurationWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePluginConfigurationResponse, error) {
	rsp, err := c.CreatePluginConfigurationWithBody(ctx, orgId, portalName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePluginConfigurationResponse(rsp)
}

func (c *ClientWithResponses) CreatePluginConfigurationWithResponse(ctx context.Context, orgId string, portalName string, body CreatePluginConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePluginConfigurationResponse, error) {
	rsp, err := c.CreatePluginConfiguration(ctx, orgId, portalName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePluginConfigurationResponse(rsp)
}

// DeletePluginConfigurationWithResponse request returning *DeletePluginConfigurationResponse
func (c *ClientWithResponses) DeletePluginConfigurationWithResponse(ctx context.Context, orgId string, portalName string, pluginName string, reqEditors ...RequestEditorFn) (*DeletePluginConfigurationResponse, error) {
	rsp, err := c.DeletePluginConfiguration(ctx, orgId, portalName, pluginName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePluginConfigurationResponse(rsp)
}

// GetPluginConfigurationWithResponse request returning *GetPluginConfigurationResponse
func (c *ClientWithResponses) GetPluginConfigurationWithResponse(ctx context.Context, orgId string, portalName string, pluginName string, reqEditors ...RequestEditorFn) (*GetPluginConfigurationResponse, error) {
	rsp, err := c.GetPluginConfiguration(ctx, orgId, portalName, pluginName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPluginConfigurationResponse(rsp)
}

// UpdatePluginConfigurationWithBodyWithResponse request with arbitrary body returning *UpdatePluginConfigurationResponse
func (c *ClientWithResponses) UpdatePluginConfigurationWithBodyWithResponse(ctx context.Context, orgId string, portalName string, pluginName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePluginConfigurationResponse, error) {
	rsp, err := c.UpdatePluginConfigurationWithBody(ctx, orgId, portalName, pluginName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePluginConfigurationResponse(rsp)
}

func (c *ClientWithResponses) UpdatePluginConfigurationWithResponse(ctx context.Context, orgId string, portalName string, pluginName string, body UpdatePluginConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePluginConfigurationResponse, error) {
	rsp, err := c.UpdatePluginConfiguration(ctx, orgId, portalName, pluginName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePluginConfigurationResponse(rsp)
}

// GetPortalProxiesWithResponse request returning *GetPortalProxiesResponse
func (c *ClientWithResponses) GetPortalProxiesWithResponse(ctx context.Context, orgId string, portalName string, params *GetPortalProxiesParams, reqEditors ...RequestEditorFn) (*GetPortalProxiesResponse, error) {
	rsp, err := c.GetPortalProxies(ctx, orgId, portalName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPortalProxiesResponse(rsp)
}

// CreatePortalProxyWithBodyWithResponse request with arbitrary body returning *CreatePortalProxyResponse
func (c *ClientWithResponses) CreatePortalProxyWithBodyWithResponse(ctx context.Context, orgId string, portalName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePortalProxyResponse, error) {
	rsp, err := c.CreatePortalProxyWithBody(ctx, orgId, portalName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePortalProxyResponse(rsp)
}

func (c *ClientWithResponses) CreatePortalProxyWithResponse(ctx context.Context, orgId string, portalName string, body CreatePortalProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePortalProxyResponse, error) {
	rsp, err := c.CreatePortalProxy(ctx, orgId, portalName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePortalProxyResponse(rsp)
}

// DeletePortalProxyWithResponse request returning *DeletePortalProxyResponse
func (c *ClientWithResponses) DeletePortalProxyWithResponse(ctx context.Context, orgId string, portalName string, proxyName string, reqEditors ...RequestEditorFn) (*DeletePortalProxyResponse, error) {
	rsp, err := c.DeletePortalProxy(ctx, orgId, portalName, proxyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePortalProxyResponse(rsp)
}

// GetPortalProxyWithResponse request returning *GetPortalProxyResponse
func (c *ClientWithResponses) GetPortalProxyWithResponse(ctx context.Context, orgId string, portalName string, proxyName string, reqEditors ...RequestEditorFn) (*GetPortalProxyResponse, error) {
	rsp, err := c.GetPortalProxy(ctx, orgId, portalName, proxyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPortalProxyResponse(rsp)
}

// UpdatePortalProxyWithBodyWithResponse request with arbitrary body returning *UpdatePortalProxyResponse
func (c *ClientWithResponses) UpdatePortalProxyWithBodyWithResponse(ctx context.Context, orgId string, portalName string, proxyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePortalProxyResponse, error) {
	rsp, err := c.UpdatePortalProxyWithBody(ctx, orgId, portalName, proxyName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePortalProxyResponse(rsp)
}

func (c *ClientWithResponses) UpdatePortalProxyWithResponse(ctx context.Context, orgId string, portalName string, proxyName string, body UpdatePortalProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePortalProxyResponse, error) {
	rsp, err := c.UpdatePortalProxy(ctx, orgId, portalName, proxyName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePortalProxyResponse(rsp)
}

// GetPortalStatusWithResponse request returning *GetPortalStatusResponse
func (c *ClientWithResponses) GetPortalStatusWithResponse(ctx context.Context, orgId string, portalName string, reqEditors ...RequestEditorFn) (*GetPortalStatusResponse, error) {
	rsp, err := c.GetPortalStatus(ctx, orgId, portalName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPortalStatusResponse(rsp)
}

// GetTenantsWithResponse request returning *GetTenantsResponse
func (c *ClientWithResponses) GetTenantsWithResponse(ctx context.Context, orgId string, params *GetTenantsParams, reqEditors ...RequestEditorFn) (*GetTenantsResponse, error) {
	rsp, err := c.GetTenants(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantsResponse(rsp)
}

// CreateTenantWithBodyWithResponse request with arbitrary body returning *CreateTenantResponse
func (c *ClientWithResponses) CreateTenantWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTenantResponse, error) {
	rsp, err := c.CreateTenantWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTenantResponse(rsp)
}

func (c *ClientWithResponses) CreateTenantWithResponse(ctx context.Context, orgId string, body CreateTenantJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTenantResponse, error) {
	rsp, err := c.CreateTenant(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTenantResponse(rsp)
}

// DeleteTenantWithResponse request returning *DeleteTenantResponse
func (c *ClientWithResponses) DeleteTenantWithResponse(ctx context.Context, orgId string, tenantName string, reqEditors ...RequestEditorFn) (*DeleteTenantResponse, error) {
	rsp, err := c.DeleteTenant(ctx, orgId, tenantName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTenantResponse(rsp)
}

// GetTenantWithResponse request returning *GetTenantResponse
func (c *ClientWithResponses) GetTenantWithResponse(ctx context.Context, orgId string, tenantName string, reqEditors ...RequestEditorFn) (*GetTenantResponse, error) {
	rsp, err := c.GetTenant(ctx, orgId, tenantName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantResponse(rsp)
}

// UpdateTenantWithBodyWithResponse request with arbitrary body returning *UpdateTenantResponse
func (c *ClientWithResponses) UpdateTenantWithBodyWithResponse(ctx context.Context, orgId string, tenantName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTenantResponse, error) {
	rsp, err := c.UpdateTenantWithBody(ctx, orgId, tenantName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTenantResponse(rsp)
}

func (c *ClientWithResponses) UpdateTenantWithResponse(ctx context.Context, orgId string, tenantName string, body UpdateTenantJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTenantResponse, error) {
	rsp, err := c.UpdateTenant(ctx, orgId, tenantName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTenantResponse(rsp)
}

// GetIdentityProvidersWithResponse request returning *GetIdentityProvidersResponse
func (c *ClientWithResponses) GetIdentityProvidersWithResponse(ctx context.Context, orgId string, tenantName string, params *GetIdentityProvidersParams, reqEditors ...RequestEditorFn) (*GetIdentityProvidersResponse, error) {
	rsp, err := c.GetIdentityProviders(ctx, orgId, tenantName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentityProvidersResponse(rsp)
}

// CreateIdentityProviderWithBodyWithResponse request with arbitrary body returning *CreateIdentityProviderResponse
func (c *ClientWithResponses) CreateIdentityProviderWithBodyWithResponse(ctx context.Context, orgId string, tenantName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIdentityProviderResponse, error) {
	rsp, err := c.CreateIdentityProviderWithBody(ctx, orgId, tenantName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIdentityProviderResponse(rsp)
}

func (c *ClientWithResponses) CreateIdentityProviderWithResponse(ctx context.Context, orgId string, tenantName string, body CreateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIdentityProviderResponse, error) {
	rsp, err := c.CreateIdentityProvider(ctx, orgId, tenantName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIdentityProviderResponse(rsp)
}

// DeleteIdentityProviderWithResponse request returning *DeleteIdentityProviderResponse
func (c *ClientWithResponses) DeleteIdentityProviderWithResponse(ctx context.Context, orgId string, tenantName string, providerName string, reqEditors ...RequestEditorFn) (*DeleteIdentityProviderResponse, error) {
	rsp, err := c.DeleteIdentityProvider(ctx, orgId, tenantName, providerName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdentityProviderResponse(rsp)
}

// GetIdentityProviderWithResponse request returning *GetIdentityProviderResponse
func (c *ClientWithResponses) GetIdentityProviderWithResponse(ctx context.Context, orgId string, tenantName string, providerName string, reqEditors ...RequestEditorFn) (*GetIdentityProviderResponse, error) {
	rsp, err := c.GetIdentityProvider(ctx, orgId, tenantName, providerName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentityProviderResponse(rsp)
}

// UpdateIdentityProviderWithBodyWithResponse request with arbitrary body returning *UpdateIdentityProviderResponse
func (c *ClientWithResponses) UpdateIdentityProviderWithBodyWithResponse(ctx context.Context, orgId string, tenantName string, providerName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIdentityProviderResponse, error) {
	rsp, err := c.UpdateIdentityProviderWithBody(ctx, orgId, tenantName, providerName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIdentityProviderResponse(rsp)
}

func (c *ClientWithResponses) UpdateIdentityProviderWithResponse(ctx context.Context, orgId string, tenantName string, providerName string, body UpdateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIdentityProviderResponse, error) {
	rsp, err := c.UpdateIdentityProvider(ctx, orgId, tenantName, providerName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIdentityProviderResponse(rsp)
}

// GetTenantUsersWithResponse request returning *GetTenantUsersResponse
func (c *ClientWithResponses) GetTenantUsersWithResponse(ctx context.Context, orgId string, tenantName string, params *GetTenantUsersParams, reqEditors ...RequestEditorFn) (*GetTenantUsersResponse, error) {
	rsp, err := c.GetTenantUsers(ctx, orgId, tenantName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantUsersResponse(rsp)
}

// CreateTenantUserWithBodyWithResponse request with arbitrary body returning *CreateTenantUserResponse
func (c *ClientWithResponses) CreateTenantUserWithBodyWithResponse(ctx context.Context, orgId string, tenantName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTenantUserResponse, error) {
	rsp, err := c.CreateTenantUserWithBody(ctx, orgId, tenantName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTenantUserResponse(rsp)
}

func (c *ClientWithResponses) CreateTenantUserWithResponse(ctx context.Context, orgId string, tenantName string, body CreateTenantUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTenantUserResponse, error) {
	rsp, err := c.CreateTenantUser(ctx, orgId, tenantName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTenantUserResponse(rsp)
}

// DeleteTenantUserWithResponse request returning *DeleteTenantUserResponse
func (c *ClientWithResponses) DeleteTenantUserWithResponse(ctx context.Context, orgId string, tenantName string, username string, reqEditors ...RequestEditorFn) (*DeleteTenantUserResponse, error) {
	rsp, err := c.DeleteTenantUser(ctx, orgId, tenantName, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTenantUserResponse(rsp)
}

// GetTenantUserWithResponse request returning *GetTenantUserResponse
func (c *ClientWithResponses) GetTenantUserWithResponse(ctx context.Context, orgId string, tenantName string, username string, reqEditors ...RequestEditorFn) (*GetTenantUserResponse, error) {
	rsp, err := c.GetTenantUser(ctx, orgId, tenantName, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantUserResponse(rsp)
}

// ParseGetClustersResponse parses an HTTP response from a GetClustersWithResponse call
func ParseGetClustersResponse(rsp *http.Response) (*GetClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClustersListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterByIdResponse parses an HTTP response from a GetClusterByIdWithResponse call
func ParseGetClusterByIdResponse(rsp *http.Response) (*GetClusterByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusterByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationsResponse parses an HTTP response from a GetOrganizationsWithResponse call
func ParseGetOrganizationsResponse(rsp *http.Response) (*GetOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationsListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationResponse parses an HTTP response from a CreateOrganizationWithResponse call
func ParseCreateOrganizationResponse(rsp *http.Response) (*CreateOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationByIDResponse parses an HTTP response from a DeleteOrganizationByIDWithResponse call
func ParseDeleteOrganizationByIDResponse(rsp *http.Response) (*DeleteOrganizationByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationByIDResponse parses an HTTP response from a GetOrganizationByIDWithResponse call
func ParseGetOrganizationByIDResponse(rsp *http.Response) (*GetOrganizationByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationByIDResponse parses an HTTP response from a UpdateOrganizationByIDWithResponse call
func ParseUpdateOrganizationByIDResponse(rsp *http.Response) (*UpdateOrganizationByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPortalsResponse parses an HTTP response from a GetPortalsWithResponse call
func ParseGetPortalsResponse(rsp *http.Response) (*GetPortalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPortalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PortalsListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePortalResponse parses an HTTP response from a CreatePortalWithResponse call
func ParseCreatePortalResponse(rsp *http.Response) (*CreatePortalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePortalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Portal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeletePortalResponse parses an HTTP response from a DeletePortalWithResponse call
func ParseDeletePortalResponse(rsp *http.Response) (*DeletePortalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePortalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPortalResponse parses an HTTP response from a GetPortalWithResponse call
func ParseGetPortalResponse(rsp *http.Response) (*GetPortalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPortalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Portal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePortalResponse parses an HTTP response from a UpdatePortalWithResponse call
func ParseUpdatePortalResponse(rsp *http.Response) (*UpdatePortalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePortalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Portal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthProvidersResponse parses an HTTP response from a GetAuthProvidersWithResponse call
func ParseGetAuthProvidersResponse(rsp *http.Response) (*GetAuthProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthProvidersListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAuthProviderResponse parses an HTTP response from a CreateAuthProviderWithResponse call
func ParseCreateAuthProviderResponse(rsp *http.Response) (*CreateAuthProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAuthProviderResponse parses an HTTP response from a DeleteAuthProviderWithResponse call
func ParseDeleteAuthProviderResponse(rsp *http.Response) (*DeleteAuthProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthProviderResponse parses an HTTP response from a GetAuthProviderWithResponse call
func ParseGetAuthProviderResponse(rsp *http.Response) (*GetAuthProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAuthProviderResponse parses an HTTP response from a UpdateAuthProviderWithResponse call
func ParseUpdateAuthProviderResponse(rsp *http.Response) (*UpdateAuthProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAuthProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCatalogProvidersResponse parses an HTTP response from a GetCatalogProvidersWithResponse call
func ParseGetCatalogProvidersResponse(rsp *http.Response) (*GetCatalogProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogProvidersListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCatalogProviderResponse parses an HTTP response from a CreateCatalogProviderWithResponse call
func ParseCreateCatalogProviderResponse(rsp *http.Response) (*CreateCatalogProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CatalogProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCatalogProviderResponse parses an HTTP response from a DeleteCatalogProviderWithResponse call
func ParseDeleteCatalogProviderResponse(rsp *http.Response) (*DeleteCatalogProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCatalogProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCatalogProviderResponse parses an HTTP response from a GetCatalogProviderWithResponse call
func ParseGetCatalogProviderResponse(rsp *http.Response) (*GetCatalogProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCatalogProviderResponse parses an HTTP response from a UpdateCatalogProviderWithResponse call
func ParseUpdateCatalogProviderResponse(rsp *http.Response) (*UpdateCatalogProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCatalogProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CatalogProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConnectionsResponse parses an HTTP response from a GetConnectionsWithResponse call
func ParseGetConnectionsResponse(rsp *http.Response) (*GetConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionsListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateConnectionResponse parses an HTTP response from a CreateConnectionWithResponse call
func ParseCreateConnectionResponse(rsp *http.Response) (*CreateConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Connection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteConnectionResponse parses an HTTP response from a DeleteConnectionWithResponse call
func ParseDeleteConnectionResponse(rsp *http.Response) (*DeleteConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConnectionResponse parses an HTTP response from a GetConnectionWithResponse call
func ParseGetConnectionResponse(rsp *http.Response) (*GetConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Connection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateConnectionResponse parses an HTTP response from a UpdateConnectionWithResponse call
func ParseUpdateConnectionResponse(rsp *http.Response) (*UpdateConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Connection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEntityPageLayoutsResponse parses an HTTP response from a GetEntityPageLayoutsWithResponse call
func ParseGetEntityPageLayoutsResponse(rsp *http.Response) (*GetEntityPageLayoutsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEntityPageLayoutsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityPageLayoutsListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEntityPageLayoutResponse parses an HTTP response from a CreateEntityPageLayoutWithResponse call
func ParseCreateEntityPageLayoutResponse(rsp *http.Response) (*CreateEntityPageLayoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEntityPageLayoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EntityPageLayout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteEntityPageLayoutResponse parses an HTTP response from a DeleteEntityPageLayoutWithResponse call
func ParseDeleteEntityPageLayoutResponse(rsp *http.Response) (*DeleteEntityPageLayoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEntityPageLayoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEntityPageLayoutResponse parses an HTTP response from a GetEntityPageLayoutWithResponse call
func ParseGetEntityPageLayoutResponse(rsp *http.Response) (*GetEntityPageLayoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEntityPageLayoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityPageLayout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateEntityPageLayoutResponse parses an HTTP response from a UpdateEntityPageLayoutWithResponse call
func ParseUpdateEntityPageLayoutResponse(rsp *http.Response) (*UpdateEntityPageLayoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEntityPageLayoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityPageLayout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIntegrationsResponse parses an HTTP response from a GetIntegrationsWithResponse call
func ParseGetIntegrationsResponse(rsp *http.Response) (*GetIntegrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIntegrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationsListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateIntegrationResponse parses an HTTP response from a CreateIntegrationWithResponse call
func ParseCreateIntegrationResponse(rsp *http.Response) (*CreateIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteIntegrationResponse parses an HTTP response from a DeleteIntegrationWithResponse call
func ParseDeleteIntegrationResponse(rsp *http.Response) (*DeleteIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIntegrationResponse parses an HTTP response from a GetIntegrationWithResponse call
func ParseGetIntegrationResponse(rsp *http.Response) (*GetIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateIntegrationResponse parses an HTTP response from a UpdateIntegrationWithResponse call
func ParseUpdateIntegrationResponse(rsp *http.Response) (*UpdateIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPluginConfigurationsResponse parses an HTTP response from a GetPluginConfigurationsWithResponse call
func ParseGetPluginConfigurationsResponse(rsp *http.Response) (*GetPluginConfigurationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPluginConfigurationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PluginConfigurationsListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePluginConfigurationResponse parses an HTTP response from a CreatePluginConfigurationWithResponse call
func ParseCreatePluginConfigurationResponse(rsp *http.Response) (*CreatePluginConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePluginConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PluginConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeletePluginConfigurationResponse parses an HTTP response from a DeletePluginConfigurationWithResponse call
func ParseDeletePluginConfigurationResponse(rsp *http.Response) (*DeletePluginConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePluginConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPluginConfigurationResponse parses an HTTP response from a GetPluginConfigurationWithResponse call
func ParseGetPluginConfigurationResponse(rsp *http.Response) (*GetPluginConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPluginConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PluginConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePluginConfigurationResponse parses an HTTP response from a UpdatePluginConfigurationWithResponse call
func ParseUpdatePluginConfigurationResponse(rsp *http.Response) (*UpdatePluginConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePluginConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PluginConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPortalProxiesResponse parses an HTTP response from a GetPortalProxiesWithResponse call
func ParseGetPortalProxiesResponse(rsp *http.Response) (*GetPortalProxiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPortalProxiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PortalProxiesListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePortalProxyResponse parses an HTTP response from a CreatePortalProxyWithResponse call
func ParseCreatePortalProxyResponse(rsp *http.Response) (*CreatePortalProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePortalProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PortalProxy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeletePortalProxyResponse parses an HTTP response from a DeletePortalProxyWithResponse call
func ParseDeletePortalProxyResponse(rsp *http.Response) (*DeletePortalProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePortalProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPortalProxyResponse parses an HTTP response from a GetPortalProxyWithResponse call
func ParseGetPortalProxyResponse(rsp *http.Response) (*GetPortalProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPortalProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PortalProxy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePortalProxyResponse parses an HTTP response from a UpdatePortalProxyWithResponse call
func ParseUpdatePortalProxyResponse(rsp *http.Response) (*UpdatePortalProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePortalProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PortalProxy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPortalStatusResponse parses an HTTP response from a GetPortalStatusWithResponse call
func ParseGetPortalStatusResponse(rsp *http.Response) (*GetPortalStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPortalStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PortalStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTenantsResponse parses an HTTP response from a GetTenantsWithResponse call
func ParseGetTenantsResponse(rsp *http.Response) (*GetTenantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TenantsListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTenantResponse parses an HTTP response from a CreateTenantWithResponse call
func ParseCreateTenantResponse(rsp *http.Response) (*CreateTenantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Tenant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteTenantResponse parses an HTTP response from a DeleteTenantWithResponse call
func ParseDeleteTenantResponse(rsp *http.Response) (*DeleteTenantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTenantResponse parses an HTTP response from a GetTenantWithResponse call
func ParseGetTenantResponse(rsp *http.Response) (*GetTenantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tenant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateTenantResponse parses an HTTP response from a UpdateTenantWithResponse call
func ParseUpdateTenantResponse(rsp *http.Response) (*UpdateTenantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tenant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIdentityProvidersResponse parses an HTTP response from a GetIdentityProvidersWithResponse call
func ParseGetIdentityProvidersResponse(rsp *http.Response) (*GetIdentityProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentityProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProvidersListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateIdentityProviderResponse parses an HTTP response from a CreateIdentityProviderWithResponse call
func ParseCreateIdentityProviderResponse(rsp *http.Response) (*CreateIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IdentityProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteIdentityProviderResponse parses an HTTP response from a DeleteIdentityProviderWithResponse call
func ParseDeleteIdentityProviderResponse(rsp *http.Response) (*DeleteIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIdentityProviderResponse parses an HTTP response from a GetIdentityProviderWithResponse call
func ParseGetIdentityProviderResponse(rsp *http.Response) (*GetIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateIdentityProviderResponse parses an HTTP response from a UpdateIdentityProviderWithResponse call
func ParseUpdateIdentityProviderResponse(rsp *http.Response) (*UpdateIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTenantUsersResponse parses an HTTP response from a GetTenantUsersWithResponse call
func ParseGetTenantUsersResponse(rsp *http.Response) (*GetTenantUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TenantUsersListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTenantUserResponse parses an HTTP response from a CreateTenantUserWithResponse call
func ParseCreateTenantUserResponse(rsp *http.Response) (*CreateTenantUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTenantUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TenantUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteTenantUserResponse parses an HTTP response from a DeleteTenantUserWithResponse call
func ParseDeleteTenantUserResponse(rsp *http.Response) (*DeleteTenantUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTenantUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTenantUserResponse parses an HTTP response from a GetTenantUserWithResponse call
func ParseGetTenantUserResponse(rsp *http.Response) (*GetTenantUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TenantUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
